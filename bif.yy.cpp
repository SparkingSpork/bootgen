#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 265
#define YY_END_OF_BUFFER 266
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1184] =
    {   0,
        0,    0,  266,  264,  261,  262,  263,  264,  253,  255,
      244,  245,  246,  247,  239,  248,  259,  252,  233,  233,
      236,  237,  264,  238,  264,  235,  258,  240,  241,  257,
      258,  235,  235,  235,  235,  235,  235,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  242,  256,  243,  254,  261,  262,    0,    0,
      259,    1,  259,  233,  235,  259,  249,  250,  235,    0,
      258,  235,  235,  258,  235,  235,  235,  258,  258,  258,
      235,  258,  258,  258,  258,  258,  235,  235,  258,  258,
      258,  235,  258,  258,  235,  235,  235,  258,  258,  258,

      258,  235,  258,  258,  258,  258,  258,  258,   51,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      203,  258,  258,  258,  202,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  260,
        0,    0,    2,  259,  234,    0,  235,  258,  235,  235,
      258,  258,  235,   74,  199,  258,  258,  258,  258,  258,
      258,  229,  258,  258,  258,   94,   96,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  235,  258,  259,

      103,  258,  258,  258,  258,  258,  258,  227,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  228,   81,  258,  162,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,   62,   35,
       90,   88,  197,  258,  258,  258,  258,  198,  258,  258,
      259,  258,  258,   95,  258,  258,   76,  258,  258,  169,
      259,  159,  160,  258,  258,  258,  258,  214,  258,  258,
      258,  258,  258,  258,  258,  258,  258,   59,  163,  258,
      205,    0,  259,  258,  259,  258,  259,  259,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,    7,  258,  259,  258,  258,   33,  177,  258,
      258,  258,  258,  258,  258,  258,  258,  207,  208,  209,
      210,  258,  258,  258,  258,  258,   53,   86,  258,  258,
      258,  258,  258,  258,   36,  258,  258,  258,   32,  258,
      258,  259,  174,  224,  258,   52,  158,  258,  259,   73,
      258,  258,  258,  258,  167,  258,  258,  258,  165,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  192,  194,  259,  259,  258,  258,  258,  258,  258,
      166,  259,  259,  259,  258,  258,   82,   83,  258,  258,
      259,  168,  259,  258,  258,  258,  258,  258,  258,  258,

      258,   93,  258,  258,    8,  258,  178,  182,  186,  189,
      258,  181,  185,  188,  191,  258,  179,  183,  180,  184,
      187,  190,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  107,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  259,  258,  258,  258,  258,  258,
      258,  258,  258,   77,  106,  258,  258,  258,  258,  258,
      258,  258,  258,   18,  258,   24,  258,  258,  258,  258,
      258,  258,  259,  259,  258,  258,  259,  258,  258,  258,
      258,   85,  258,  258,  258,  258,  204,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  259,  193,

      195,  258,  258,  258,  258,  258,  161,  259,  259,  258,
      258,  258,  258,  259,  259,  259,  258,  259,  258,  258,
      258,  258,  223,  258,  258,  258,  258,   87,  258,  258,
      259,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,   19,  258,  258,
      258,  258,  258,  258,  259,  258,  258,  258,  258,  258,
      258,  258,  258,  259,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  105,  258,
      258,  258,  259,  259,  258,  258,  259,  259,  258,  226,

       29,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  157,  156,  259,  258,
      258,  258,  258,  258,  259,  259,  259,  258,  212,  258,
      258,  259,  259,  259,  258,  259,  220,  258,  258,  258,
      258,  258,    9,  258,   37,  258,  259,  258,  258,  258,
      135,  137,  136,  138,  152,  258,  155,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,   97,  258,  200,  258,  258,  258,  258,
      258,  258,  258,  258,  259,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  258,   49,
      258,  258,   28,  258,  258,  130,  258,  258,  173,  259,
      258,  258,   91,   89,  258,  144,  258,  258,  258,   57,
      258,  258,   39,    4,  258,   40,  258,  258,  258,  258,
      259,  139,  258,   31,  258,  153,  259,  170,  171,   26,
      146,  258,  259,  259,  259,  258,  259,  258,   41,  258,
       42,   34,  258,  258,  259,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,   80,  258,  258,  258,  258,

      258,  258,  258,  258,  259,  259,  258,  258,  258,  258,
      258,  258,  164,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,   27,  258,  175,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,   55,  258,
      142,  259,  258,  258,  258,  259,  258,   98,  259,  259,
      258,  259,  258,  258,  258,    5,  259,  258,   70,    6,
      258,  258,   13,  143,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,   66,   58,  258,  258,
      258,  258,  258,   47,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  259,  259,  258,  258,  258,

      258,  258,  258,  258,  258,   71,  258,  258,  258,  258,
      258,  258,  258,  258,  258,   11,  258,  213,   48,  258,
       23,  258,  258,  258,   12,  145,  258,  259,  134,  258,
      222,  172,  225,  259,  100,  258,  218,  258,  258,  211,
      259,  116,  117,  118,  119,  120,  121,  122,  123,  258,
       38,  258,  258,   20,  258,  258,  258,  258,  258,  258,
      258,  115,  114,   54,  258,   21,  258,  258,    3,  258,
      258,   17,  258,   16,  258,  231,  258,  258,  258,   78,
       79,  258,  258,  258,  258,  258,   72,  258,  258,  258,
      258,  258,  258,  258,   64,  258,  258,   25,  258,   60,

      258,   63,  258,  216,  258,  259,  258,   99,  259,  150,
      217,  258,  219,  258,  215,  258,  258,  258,  258,  258,
      258,  258,  258,   44,  132,  154,   46,  258,  258,  258,
      149,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      131,   61,  221,  258,  258,  258,  258,   10,  258,  258,
       56,  147,  196,  258,  259,  259,  258,   22,  258,  258,
      258,  258,  258,   65,  258,  258,  258,  258,  258,  148,
      258,  258,  258,   67,  258,  258,  258,  258,  258,  258,
      258,  133,  232,  258,  258,  258,  258,  259,  259,   43,
      258,  258,  258,  112,  113,  111,  258,  258,   15,  258,

      258,   14,  109,  110,  108,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  259,  259,  258,   75,  258,
      140,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,   92,   30,  101,  259,  258,  230,  258,
      176,  258,  258,  258,  258,  258,  124,  127,  206,  258,
       45,  258,   84,  259,  141,  258,  258,  258,  258,  258,
      258,   50,  258,  102,  258,  258,  258,  258,  258,  258,
      104,  258,  201,  258,  258,   68,   69,  151,  125,  128,
      126,  129,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,    6,   33,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   35,   34,   34,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    1,    3,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1188] =
    {   0,
        0,    0, 2428, 2429,   69, 2424, 2429,   70, 2429, 2429,
     2429, 2429, 2429,    0, 2429,    0,    0,   60,  119,   38,
     2429, 2429, 2396, 2429, 2393,  171,  220, 2429, 2429, 2429,
     2396,  227,  232,  103,  121,  248,  237,  108,  115, 2363,
       37, 2367,  260,  126,  214,  258, 2362,  283,  303,   41,
      276, 2371, 2429, 2429, 2429, 2429,  169, 2416, 2411,  172,
        0, 2429,  363,  121,  416,  463, 2429, 2429, 2389,  165,
     2388,  228,  492,  227,  120,  306,  320,   56,  152,  147,
      145,  294,  329,  230,  254,  267,  299,  220,  313,  148,
      324,  353,  357,  308,  302,  364,  383,  382,  361,  350,

      386,  333,  231,  359,  378,  368,  383,  385,  417,  420,
      421,  422,  360,  398,  424,  399,  310,  393,  428,  379,
      427,  438,  498,  431,  434,  441,  444,  445,  472,  432,
      440,  499,  450,  495,  471,  500,  446,  529,  501,  503,
      504,  447,  513,  519,  548,  515,  520,  531,  542,  523,
      526,  543,  525,  550,  527,  551,  552,  557,  559, 2429,
      571, 2412, 2429,  615,    0,    0,  620,  621,  575,  578,
      567,  564,  573,  563, 2386,  566,  584,  600,  622,  606,
      612, 2385,  614,  577,  630, 2384,  644,  634,  611,  610,
      646,  637,  628,  638,  648,  651,  581,  639,  640,  682,

     2383,  652,  661,  662,  664,  667,  668, 2382,  653,  669,
      676,  680,  683,  686,  687,  658,  689,  691,  694,  693,
      695, 2381, 2380,  699,  713,  702,  696,  704,  701,  707,
      727,  710,  715,  720,  716,  724,  725,  726,  733, 2379,
     2378,  723,  729,  736,  730,  731,  734, 2377,  755,  738,
      760,  766,  756, 2376,  760,  762, 2375,  764,  765, 2374,
     2349,  781,  782,  770,  793,  773,  774,  792,  776,  801,
      790,  780,  791,  783,  795,  797,  794, 2372, 2371,  796,
      810, 2391,  825,  229,  837,  771,  398,  843,  809,  800,
      825,  831,  837,  838,  840,  841,  843,  845,  844,  847,

      851,  846,  858,  849, 2350,  853,  854, 2368, 2367,  856,
      857,  862,  859,  864,  872,  881,  873,    0,    0,    0,
        0,  883,  884,  885,  891,  887, 2366,  888,  895,  898,
      897,  896,  899,  901, 2365,  906,  902,  903, 2364,  904,
      905, 2333,  921, 2362,  907, 2361, 2360,  910, 2331, 2358,
      919,  924,  922,  929, 2357,  930,  931,  933, 2356,  938,
      940,  941,  943,  944,  945,  947,  946,  948,  950,  956,
      969,    0,    0, 2328,  592,  949,  958,  951,  955,  959,
     2354, 2322, 2322, 2321,  970,  973, 2350, 2349,  975,  977,
      969,  985, 2331,  987,  988,  990,  992,  993,  995,  996,

      998, 2347,  999, 1005, 1023, 1001,    0,    0,    0,    0,
     1020,    0,    0,    0,    0, 1029,    0,    0,    0,    0,
        0,    0, 1006, 1039, 1012, 1004, 1015, 1028, 1034, 1036,
     1037, 1038, 1042, 1044, 1045, 1047, 1049, 1051, 1048, 1057,
     1053, 1054, 1063, 1052, 2315, 1060, 1068, 1064, 1061, 1071,
     1086, 1089, 1090, 1105, 1094, 1065, 1095, 1066,  986, 1096,
     1097, 1099, 1100, 2345, 1107, 1104, 1108, 1109, 1110, 1111,
     1113, 1114, 2331, 2313, 1115, 1117, 1094, 1122, 1126, 1127,
     1132, 2342, 1134, 1136, 1139, 1138, 1140, 1146, 1143, 1142,
     1147, 1148, 1151, 1153, 1154, 1157,  309,   80, 2326,    0,

        0, 1158, 1156, 1155, 1173, 1164, 2353, 2326, 2325, 1165,
     1177, 1178, 1179, 2310, 2309, 2311, 1175, 2316, 1180, 1183,
     1184, 1185, 2333, 1187, 1186, 1188,  144, 2332, 1197, 1199,
     2314, 1198, 1201, 1202, 1213, 1215, 1214, 1222, 1207, 1228,
     1223, 1224, 1226, 1225, 1227, 1230, 1231, 1232, 1233, 1238,
     1235, 1236, 1237, 1241, 1244, 1234, 1259, 2330, 1245, 1260,
     1263, 1265, 1266, 1267, 2314, 1269, 1270, 1271, 1273, 1280,
     1282, 1287, 1274, 2300, 1293, 1283, 1288, 1285, 1296, 1297,
     1290, 1298, 1299, 1301, 1309, 1289, 1310, 1314, 1319, 1303,
     1322, 1328, 2292, 2313, 1329, 1332, 2300, 2309, 1333, 2323,

     2322, 1334, 1336, 1337, 1338, 1342, 1344, 1343, 1345, 1346,
     1347, 1351, 1349, 1350, 1357, 1359, 2321, 2320, 2296, 1353,
     1361, 1370, 1378, 1352, 2288, 2282, 2281, 1360, 2315, 1375,
     1354, 2287, 2287, 2299, 1382, 2278, 2310, 1383, 1385, 1388,
     1389, 1391, 2309, 1393, 2308, 1392, 2289, 1394, 1395, 1396,
     2306, 2305, 2304, 2303, 2302, 1397, 2301, 1400, 1399, 1398,
     1401, 1404, 1408, 1413, 1410, 1415, 1416, 1418, 1426, 1428,
     1427, 1430, 1433, 1436, 1437, 1438, 1441, 1442, 1444, 1445,
     1447, 1448, 1451,    0, 1449, 2300, 1452, 1456, 1455, 1459,
     1460, 1466, 1461, 1471, 1472, 1473, 1475, 1477, 1481, 1483,

     1486, 1488, 1489, 1490, 1492, 1493, 1495, 1499, 1496, 2299,
     1500, 1501, 2298, 1504, 1508, 2297, 1502, 1510,    0, 2261,
     1511, 1503,    0,    0, 1513, 2295, 1515, 1518, 1523, 2294,
     1522, 1524, 2293, 2292, 1532, 2291, 1534, 1537, 1531, 1533,
     2259, 2289, 1540, 1544, 1542, 2288, 2274,    0,    0, 2286,
     2285, 1546, 2252, 2265, 2248, 1551, 2250, 1552, 2280, 1555,
     2279, 2278, 1557, 1558, 2244, 1559, 1560, 1561, 1565, 1570,
     1566, 1572, 1574, 1584, 1577, 1580, 1581, 1579, 1575, 1582,
     1585, 1586, 1589, 1597, 1588, 1592, 1599, 1604, 1607, 1610,
     1608, 1613, 1615, 1611, 1617, 2276, 1616, 1618, 1621, 1619,

     1624, 1625, 1636, 1627, 2277, 2282, 1631, 1635, 1641, 1642,
     1643, 1646, 2273, 1645, 1647, 1651, 1652, 1655, 1656, 1657,
     1661, 1662, 1663, 1665, 2272, 1666,    0, 1668, 1669, 1677,
     1674, 1675, 1678, 1681, 1684, 1686, 1679, 1685, 2271, 1693,
     2270, 2237, 1699, 1703, 1705, 2233, 1706,    0, 2246, 2249,
     1707, 2248, 1708, 1709, 1712, 2264, 2232, 1740, 2262, 2261,
     1715, 1726, 2260, 2259, 1719, 1710, 1714, 1711, 1746, 1713,
     1747, 1748, 1750, 1749, 1717, 1718, 2258, 2257, 1751, 1752,
     1753, 1756, 1757, 2256, 1758, 1763, 1765, 1764, 1767, 1769,
     1770, 1773, 1766, 1778, 1771, 2261, 2263, 1789, 1791, 1794,

     1795, 1774, 1776, 1796, 1798, 2253, 1799, 1800, 1781, 1805,
     1809, 1811, 1810, 1814, 1812, 2252, 1815, 2251, 2250, 1816,
     1818, 1817, 1822, 1823, 2249, 2248, 1825, 2230, 2246, 1826,
     2245,    0, 2244, 2224, 2255, 1824,    0, 1833, 1834, 2241,
     2223, 2239, 2238, 2237, 2236, 2235, 2234, 2233, 2232, 1835,
     2231, 1839, 1840, 2230, 1836, 1846, 1848, 1849, 1854, 1856,
     1847, 2229, 2228, 2227, 1852, 2226, 1858, 1859, 2225, 1850,
     1861, 2224, 1862, 2223, 1864, 2222, 1863, 1874, 1866,    0,
        0, 1878, 1882, 1883, 1884, 1885, 2221, 1886, 1887, 1892,
     1896, 1894, 1895, 1899, 2220, 1891, 1900, 2219, 1902, 2218,

     1906, 2217, 1909, 2216, 1913, 2187, 1916,    0, 1903, 2214,
     2213, 1915,    0, 1919, 2212, 1921, 1922, 1923, 1925, 1927,
     1928, 1929, 1937, 2211, 2210, 2209, 2208, 1932, 1939, 1940,
     2207, 1950, 1953, 1955, 1956, 1931, 1958, 1960, 1959, 1954,
     2206, 2205, 2204, 1961, 1963, 1964, 1968, 2203, 1969, 1970,
     2202, 2201,    0, 1977, 2173, 2172, 1978, 2198, 1981, 1984,
     1980, 1985, 1986, 2197, 1987, 1988, 1989, 1991, 1999, 2196,
     1992, 1997, 2000, 2195, 2001, 2002, 2003, 2008, 2013, 2016,
     2017, 2194, 2193, 2018, 2019, 2020, 2021, 2165, 2165, 2190,
     2027, 2028, 2030, 2189, 2188, 2187, 2032, 2040, 2177, 2029,

     2039, 2176, 2175, 2174, 2171, 2035, 2042, 2043, 2044, 2055,
     2053, 2059, 2060, 2064, 2062, 2138, 2151, 2063, 2168, 2065,
     2167, 2070, 2067, 2068, 2074, 2076, 2103, 2105, 2073, 2090,
     2072, 2071, 2078, 2166, 2164,    0, 2142, 2098, 2162, 2101,
     2160, 2104, 2107, 2109, 2110, 2111, 2159, 2158, 2156, 2112,
     2154, 2113, 2153, 2133, 2151, 2114, 2118, 2117, 2119, 2116,
     2120, 2149, 2124,    0, 2127, 2126, 2128, 2135, 2139, 2144,
     2075, 2138, 2069, 2155, 2157, 1720,  572,  390,  311,  301,
      226,  223, 2429,  147, 2205, 2208, 2211
    } ;

static yyconst flex_int16_t yy_def[1188] =
    {   0,
     1183,    1, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1184, 1183, 1184, 1184, 1184, 1184,   19,
     1183, 1183, 1183, 1183, 1183, 1183,   26, 1183, 1183, 1183,
       27,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1183, 1183, 1183, 1183, 1183, 1183, 1185, 1185,
     1184, 1183, 1186,   19,   19,   65, 1183, 1183,   26, 1183,
       27,   26,   27,   27,   26,   73,   73,   27,   27,   27,
       26,   27,   27,   27,   27,   27,   26,   26,   27,   27,
       27,   26,   27,   27,   26,   73,   73,   27,   27,   27,

       27,   26,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1183,
     1183, 1187, 1183, 1186,   66, 1184,   26,   27,   26,   73,
       27,   27,   26,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   26,   27, 1184,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1184,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1184,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1185, 1184,   27, 1184,   27, 1184, 1184,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27, 1184,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1184, 1184, 1184,
     1184,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1184,   27,   27,   27,   27,   27,   27, 1184,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1184, 1184, 1184, 1184,   27,   27,   27,   27,   27,
       27, 1184, 1184, 1184,   27,   27,   27,   27,   27,   27,
     1184,   27, 1184,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27, 1184, 1184, 1184, 1184,
       27, 1184, 1184, 1184, 1184,   27, 1184, 1184, 1184, 1184,
     1184, 1184,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1184,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1184, 1184,   27,   27, 1184,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1184, 1184,

     1184,   27,   27,   27,   27,   27, 1184, 1184, 1184,   27,
       27,   27,   27, 1184, 1184, 1184,   27, 1184,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1184,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1184,   27,   27,   27,   27,   27,
       27,   27,   27, 1184,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1184, 1184,   27,   27, 1184, 1184,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1184,   27,
       27,   27,   27,   27, 1184, 1184, 1184,   27,   27,   27,
       27, 1184, 1184, 1184,   27, 1184,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1184,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1184,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1184,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1184, 1184,
       27,   27, 1184, 1184,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1184,   27,   27,   27,   27,   27, 1184, 1184, 1184,   27,
       27,   27, 1184, 1184, 1184,   27, 1184,   27,   27,   27,
       27,   27,   27,   27, 1184,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27, 1184, 1184,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1184,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1184,   27,   27,   27, 1184,   27, 1184, 1184, 1184,
       27, 1184,   27,   27,   27,   27, 1184,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1184, 1184,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1184,   27,   27,
       27, 1184,   27, 1184, 1184,   27, 1184,   27,   27,   27,
     1184,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1184,
     1184,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27, 1184,   27, 1184, 1184,   27,
       27,   27, 1184,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1184,   27, 1184, 1184,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1184, 1184,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1184, 1184,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1184, 1184,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1184,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1184,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,    0, 1183, 1183, 1183, 1183
    } ;

static yyconst flex_int16_t yy_nxt[2500] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   17,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   27,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   27,   27,   52,   27,   27,   53,   54,   55,   56,
       57,   62,   61,   57,   59,   59,   63,   59,   59,   59,
       59,  113,   59, 1183,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  114,  153,  618,

      175,   61,   60,   60,   60,  154,   59, 1183,   59,   59,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   87, 1183,   88,   61,
       89,   65,  107,   66,   90,   61,  108,   91,  109,   65,
       65,   65,   65,   65,   65,   92,  122,  110,  111,   93,
       57, 1183, 1183,   57, 1183, 1183,   94,  172,  160, 1183,
      123,  166,   66,   61,   61,   61,   61,   61,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   70,  161,

      176,  166,  178,   69,   71,   71,  177,   61,  189,  644,
       71,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1183,  167,   72,
     1183,   73,   71, 1183, 1183, 1183, 1183, 1183, 1183,  124,
       71,   71,   71,   71,   71,   71,   74,   75,  187,  125,
       76,   77,  126,   81,  171,   78,  127,  102,   79,   82,
       83, 1183,  207,   84,  183,  103,   85,   80,   95,  104,
       96,  168,  411,   97, 1183,  105,   86,  106,  128,   98,

      129,   99,  116,  117,  118,  138,  130,  100,  184,  131,
      132,  101,  119,  133,  120,  134,  135,  155,  136,  156,
      121, 1183,  185,  139,  157,   69, 1183,  140, 1183, 1183,
      617,   69,  223,  179,  158, 1183, 1183, 1183, 1183,   69,
     1183,  141,  142,  143,  144,   69,  145,  146,  196,  173,
      147, 1183,  180,  186,  148,  149, 1183,  188,  150,  197,
     1183,  151,  152,  162,  162,  163,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  181,  162, 1183,  174,  190,
     1183,  191,  182,   69, 1183,  206, 1183, 1183, 1183,   69,
      162,  162,  162,  162,  162, 1183,  200,  203,  162,  195,

      162,  162,   69,  202,  192, 1183, 1183,  198,   69, 1183,
     1183,  193, 1183, 1183,  194,  417,  418, 1183,  208,  209,
     1183,  210,  226,  211,  218, 1183, 1183,  201,  204,  162,
      162,  162,  162,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  199, 1183,  205,  212, 1183, 1183, 1183,
       61, 1183,  224,  219, 1183, 1183,  213,  222, 1183, 1183,
      214, 1183,  217,  215,  220, 1183,  221, 1183, 1183,  216,
      225, 1183, 1183, 1183, 1183,  240,  233, 1183,  227,   61,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      228,  229,  241,  234,  258,  165,  235,  236, 1183, 1183,

      244,  250,  237,  165,  165,  165,  165,  165,  165,   69,
       69,  169,   69,   69,   69,   69,   69,  170,   69, 1183,
      238,  247, 1183,  248,   69, 1183, 1183, 1183, 1183,  239,
     1183, 1183,   69,   69,   69,   69,   69,   69,  230,  245,
     1183,  242, 1183,  251,  257,  249, 1183, 1183,  252,  246,
     1183,  231, 1183, 1183, 1183,  232, 1183,  264, 1183,  243,
      265,  255,  261,  254,  256,  262,  263,  260,  253, 1183,
     1183,  267,  259,  270,  271, 1183,  272, 1183, 1183, 1183,
      266,  276,  269,  273, 1183,  274, 1183,  282,  268,  287,
     1183, 1183,  288, 1183, 1183,  278,  277,   69,  279, 1183,

     1183,  280, 1183,   69, 1183,  275,  290,  282, 1183,  500,
      501, 1183,  293,  292,  281,  162,  162,  163,  162,  162,
      162,  162,  162,  162,  162,  162,  162, 1183,  162,  289,
      291,  294,  315, 1183,  283,  285,  303, 1183, 1183, 1183,
      295, 1183,  162,  162,  162,  162,  162, 1183, 1183, 1183,
      162,  301,  162,  162,  300, 1183,  302, 1183,  305,  284,
      286, 1183,  296,  297, 1183, 1183, 1183, 1183,  298,  307,
      304, 1183,  299, 1183,  308, 1183,  306,  310, 1183, 1183,
     1183,  162,  162,  162,  162, 1183,  312,  311, 1183, 1183,
      309, 1183,  313,  314, 1183, 1183, 1183,  316,  317,  318,

      319,  320,  321, 1183,  328,  323,  324, 1183,  325,  322,
     1183,  329,  327, 1183, 1183,  326, 1183,  335, 1183,  330,
     1183, 1183, 1183, 1183,  331,  332, 1183,  342, 1183, 1183,
      343, 1183,  333,  338, 1183,  336,  339, 1183,  334,  341,
     1183,  349, 1183, 1183,  347,  340,  344, 1183,  346,  337,
     1183, 1183, 1183, 1183, 1183,  345, 1183, 1183, 1183,  354,
     1183, 1183,  352, 1183,  355, 1183,  361,  348,  356,  357,
      359,  350,  360,  353,  362,  363,  368,  372,  373,  367,
      375,  364, 1183, 1183,  358,  351,  371, 1183,  365, 1183,
      366, 1183, 1183, 1183,  369,  383,  384, 1183, 1183,  376,

     1183, 1183,  370, 1183,  378,  381,  391, 1183, 1183, 1183,
     1183,  374,  387,  388,  377,  393,  379, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183,  398,  380, 1183, 1183,  385,
      386,  392,  389,  404,  416,  390, 1183, 1183,  397,  402,
      394,  401,  407,  408,  409,  410,  395,  424,  399,  406,
      400,  403, 1183,  405,  412,  413,  414,  415, 1183,  396,
      419,  420,  421,  422, 1183, 1183,  423, 1183, 1183,  425,
     1183, 1183, 1183, 1183, 1183,  426, 1183,  428, 1183,  429,
     1183, 1183,  430, 1183, 1183, 1183, 1183,  431,  436, 1183,
      427, 1183,  432,  437,  434,  438,  439,  440,  451, 1183,

     1183,  433,  435,  446,  450,  449,  441,  444, 1183,  442,
     1183, 1183, 1183,  447, 1183, 1183,  452,  455, 1183,  443,
      448,  454, 1183, 1183, 1183, 1183, 1183,  461, 1183, 1183,
     1183, 1183, 1183, 1183, 1183,  474,  453, 1183,  460,  464,
      458,  457,  463,  466,  459,  468, 1183,  456, 1183, 1183,
      465, 1183,  472,  470,  462,  475, 1183, 1183, 1183,  469,
     1183,  467,  471,  478,  479, 1183,  480, 1183, 1183,  476,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,  481,
      486,  484, 1183, 1183,  483, 1183, 1183,  482,  497,  498,
      485,  491,  489,  490,  492,  494, 1183, 1183,  493,  496,

     1183,  488, 1183,  487, 1183,  505,  503,  495,  504,  502,
      514,  515, 1183, 1183, 1183, 1183,  506, 1183,  510, 1183,
     1183,  513, 1183, 1183,  517, 1183, 1183,  516, 1183,  579,
      511, 1183, 1183, 1183,  512,  519,  521,  531,  522, 1183,
      535,  524, 1183,  536,  526,  520,  529, 1183,  530,  537,
     1183,  523,  538,  534,  525, 1183, 1183,  527,  528,  540,
      539, 1183,  532, 1183, 1183, 1183, 1183,  543,  542, 1183,
      541, 1183, 1183,  533, 1183, 1183, 1183,  550, 1183, 1183,
     1183, 1183,  544,  545, 1183,  547,  546, 1183, 1183,  548,
     1183, 1183, 1183, 1183,  552, 1183,  549,  554, 1183,  559,

      560,  551,  556,  568,  557,  561,  558,  563,  562,  553,
      564,  555,  567, 1183,  569,  570, 1183, 1183,  566,  574,
      576, 1183, 1183, 1183, 1183,  578, 1183, 1183,  572,  573,
      571, 1183, 1183,  575, 1183, 1183, 1183, 1183, 1183,  581,
     1183, 1183, 1183,  585, 1183,  597,  598,  582,  577, 1183,
      584,  587,  589, 1183, 1183,  590,  595,  583,  592, 1183,
      580, 1183,  586, 1183,  599, 1183, 1183, 1183,  588, 1183,
     1183,  596,  591, 1183, 1183, 1183,  602,  600, 1183,  607,
     1183, 1183, 1183, 1183, 1183, 1183,  601,  605,  610,  611,
      608, 1183, 1183,  603,  609,  604,  616,  606,  620,  612,

     1183,  614, 1183,  613, 1183, 1183, 1183, 1183,  615,  621,
     1183, 1183, 1183, 1183, 1183, 1183,  622,  623,  624,  628,
      631,  629,  630,  637, 1183, 1183, 1183,  638, 1183, 1183,
      643,  640,  651,  653, 1183,  639,  652,  635,  641,  646,
     1183, 1183, 1183,  654,  645,  649,  642,  656,  648, 1183,
     1183, 1183, 1183, 1183, 1183, 1183,  650, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183,  655,  661, 1183,  658,
      659, 1183, 1183,  665,  676,  671,  672,  662,  660,  666,
      673,  657,  670,  674,  667,  663, 1183, 1183,  668,  675,
     1183,  664, 1183, 1183, 1183,  669, 1183, 1183, 1183,  678,

     1183, 1183,  677,  680,  679,  681,  683, 1183,  682, 1183,
     1183,  687, 1183,  690, 1183, 1183, 1183, 1183,  688,  691,
     1183,  694,  689, 1183, 1183, 1183, 1183,  686, 1183,  685,
     1183,  693,  702,  703,  696,  692, 1183, 1183,  708,  697,
      704, 1183,  701,  698,  706,  710, 1183,  705,  712, 1183,
      699,  711,  707,  700,  713, 1183, 1183,  709,  715, 1183,
     1183, 1183,  714, 1183, 1183, 1183,  717,  716,  718, 1183,
     1183, 1183, 1183, 1183, 1183,  727, 1183, 1183, 1183, 1183,
     1183, 1183,  730,  721, 1183,  728, 1183, 1183, 1183,  733,
      722,  729,  731,  725,  732,  736,  739, 1183,  726,  734,

      740,  738, 1183,  737,  742, 1183,  735,  743,  752, 1183,
     1183,  746, 1183,  750,  744, 1183, 1183,  745, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,  759,
      756, 1183,  751,  761,  758, 1183,  769, 1183,  766,  768,
     1183,  760, 1183, 1183,  774, 1183,  762,  763,  770,  772,
      775,  764,  771, 1183, 1183, 1183,  777, 1183,  773,  767,
     1183,  776,  780, 1183, 1183, 1183,  778,  782, 1183, 1183,
      781, 1183, 1183,  779, 1183, 1183, 1183,  783, 1183, 1183,
      784,  785, 1183, 1183,  786,  787, 1183, 1183, 1183,  789,
      793,  792,  805, 1183,  806,  790,  798,  788, 1183,  795,

     1183,  796, 1183,  801, 1183,  791,  802,  794, 1183,  799,
     1183,  804,  797, 1183,  803, 1183, 1183, 1183,  800, 1183,
     1183,  809, 1183, 1183,  807,  810, 1183, 1183, 1183, 1183,
     1183, 1183,  808,  815,  812, 1183,  816, 1183, 1183,  819,
     1183,  811, 1183,  814,  820, 1183,  817,  813,  818, 1183,
     1183, 1183,  824,  826,  821,  822,  823,  825, 1183, 1183,
     1183, 1183,  829,  831, 1183,  828,  834, 1183,  836, 1183,
      830, 1183,  833, 1183,  835,  832,  837,  838, 1183, 1183,
      841,  839, 1183,  844, 1183, 1183, 1183, 1183, 1183,  840,
      845,  843, 1183, 1183,  851,  854,  853, 1183,  856, 1183,

      847, 1183, 1183,  866, 1183,  860, 1183, 1183, 1183, 1183,
      855, 1183, 1183, 1183,  865, 1183, 1183,  861,  859, 1183,
      869,  862,  868,  858, 1183,  863, 1183,  867,  873,  870,
      874, 1183,  872,  875, 1183, 1183,  864, 1183, 1183,  871,
     1183,  876, 1183, 1183, 1183, 1183, 1183,  881, 1183,  877,
      879, 1183, 1183,  878, 1183,  882,  883,  884, 1183,  885,
      887,  890, 1183, 1183,  880,  886,  893,  891, 1183, 1183,
     1183,  889, 1183, 1183, 1183,  888,  894,  892, 1183, 1183,
      895,  898, 1183, 1183, 1183,  901,  905,  902, 1183, 1183,
     1183,  900, 1183, 1183,  908, 1183, 1183,  907,  904,  899,

      903, 1183, 1183,  910, 1183, 1183, 1183,  913, 1183,  917,
      915, 1183, 1183, 1183,  911,  906,  909,  919,  914,  912,
     1183,  918,  925,  920,  923,  922, 1183,  916,  924,  926,
     1183,  921, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183,  929, 1183, 1183, 1183, 1183,  931,  953,
      938,  955,  957, 1183,  930,  927,  940,  942,  943,  944,
      945,  946,  947,  948,  949,  933,  936, 1183,  939,  950,
      951,  952,  954, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183,  962,  963, 1183, 1183, 1183,  958,  959,  956,  960,
     1183, 1183, 1183, 1183, 1183,  964, 1183, 1183, 1183,  968,

     1183, 1183,  961, 1183,  967, 1183,  966,  971, 1183,  965,
      973,  972,  974,  976,  979,  969, 1183,  977, 1183,  978,
      970, 1183, 1183, 1183,  975, 1183, 1183, 1183,  982,  987,
      983,  986, 1183,  984,  985,  988, 1183, 1183, 1183, 1183,
      992, 1183, 1183, 1183, 1183, 1183,  989,  990,  991, 1183,
     1183, 1183, 1183, 1183,  994,  995,  997, 1001,  993, 1000,
     1183, 1183, 1183, 1183,  996, 1005, 1183, 1183, 1003,  998,
     1007, 1010,  999, 1183, 1183, 1183, 1183, 1183, 1014, 1183,
     1002, 1183, 1004, 1183, 1016, 1183, 1183, 1023, 1183, 1183,
     1183, 1183, 1011, 1183, 1012, 1017, 1024, 1015, 1019, 1020,

     1018, 1183, 1021, 1026, 1025, 1183, 1022, 1031, 1027, 1183,
     1183, 1183, 1183, 1183, 1183, 1028, 1029, 1030, 1183, 1183,
     1033, 1183, 1183, 1183, 1038, 1032, 1183, 1183, 1034, 1183,
     1040, 1036, 1035, 1183, 1037, 1044, 1183, 1039, 1041, 1042,
     1183, 1043, 1183, 1183, 1055, 1056, 1183, 1045, 1183, 1183,
     1183, 1046, 1183, 1051, 1183, 1183, 1183, 1047, 1183, 1183,
     1049, 1048, 1054, 1058, 1183, 1050, 1183, 1183, 1052, 1062,
     1060, 1063, 1057, 1065, 1059, 1067, 1061, 1183, 1066, 1069,
     1183, 1183, 1183, 1183, 1068, 1183, 1183, 1183, 1183, 1064,
     1183, 1183, 1074, 1080, 1070, 1183, 1183, 1183, 1071, 1072,

     1073, 1076, 1075, 1079, 1183, 1183, 1077, 1183, 1183, 1082,
     1078, 1183, 1183, 1183, 1183, 1183, 1183, 1087, 1183, 1183,
     1081, 1091, 1090, 1083, 1183, 1093, 1183, 1183, 1183, 1183,
     1183, 1085, 1084, 1098, 1086, 1183, 1099, 1102, 1092, 1097,
     1183, 1100, 1101, 1183, 1183, 1183, 1183, 1183, 1183, 1094,
     1095, 1096, 1108, 1106, 1183, 1183, 1183, 1183, 1110, 1183,
     1107, 1103, 1183, 1115, 1104, 1105, 1183, 1183, 1118, 1183,
     1183, 1183, 1113, 1112, 1109, 1114, 1121, 1111, 1120, 1122,
     1183, 1119, 1183, 1124, 1123, 1125, 1183, 1183, 1129, 1183,
     1183, 1183, 1183, 1127, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1133, 1183, 1126, 1128, 1134, 1130,
     1131, 1139, 1140, 1143, 1138, 1144, 1151, 1183, 1132, 1152,
     1145, 1146, 1147, 1148, 1149, 1183, 1135, 1141, 1183, 1142,
     1183, 1183, 1183, 1150, 1183, 1153, 1183, 1183, 1183, 1183,
     1183, 1183, 1155, 1183, 1183, 1183, 1183, 1183, 1156, 1160,
     1161, 1183, 1157, 1183, 1183, 1183, 1162, 1158, 1165, 1159,
     1166, 1167, 1183, 1168, 1169, 1183, 1183, 1163, 1170, 1172,
     1173, 1183, 1179, 1180, 1181, 1182, 1183, 1171, 1183, 1164,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1178, 1183,
     1154, 1183, 1174, 1183, 1183, 1183, 1137, 1136, 1183, 1175,

     1176, 1183, 1183, 1183, 1183, 1177,   59,   59,  164,  164,
      164,  162,  162,  162, 1183, 1183, 1183, 1183, 1117, 1116,
     1183, 1183, 1183, 1183, 1183, 1183, 1089, 1088, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1053, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1013, 1183, 1009,
     1008, 1183, 1183, 1183, 1006, 1183, 1183, 1183, 1183, 1183,
     1183,  981,  980, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
      941, 1183,  937,  935,  934,  932,  928, 1183, 1183, 1183,

     1183,  897,  896, 1183,  857, 1183, 1183, 1183,  852,  850,
      849,  848, 1183, 1183,  846, 1183, 1183,  842, 1183, 1183,
     1183, 1183, 1183,  827, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183,  765, 1183, 1183, 1183,  757,  755,
      754,  753, 1183,  749,  748,  747,  741, 1183, 1183, 1183,
     1183,  724,  723,  720,  719,  695,  684, 1183,  647, 1183,
     1183,  636,  634,  633,  632,  627,  626,  625,  619, 1183,
      594,  593, 1183,  565, 1183,  518, 1183, 1183,  509,  508,
      507, 1183,  499, 1183, 1183, 1183,  477, 1183, 1183, 1183,
      473, 1183, 1183, 1183, 1183, 1183,  445, 1183, 1183, 1183,

      382, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183,  163, 1183, 1183,  160,   58,  159,
      137,  115,  112, 1183,   68,   67,   58, 1183,    3, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183

    } ;

static yyconst flex_int16_t yy_chk[2500] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   18,   20,    5,    8,    8,   18,    8,    8,    8,
        8,   41,    8,   78,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   41,   50,  498,

       78,   20,    8,    8,    8,   50,    8,  498,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   34,   75,   34, 1184,
       34,   19,   38,   19,   34,   64,   38,   34,   39,   19,
       19,   19,   19,   19,   19,   35,   44,   39,   39,   35,
       57,  527,   81,   57,   80,   90,   35,   75,   60,   79,
       44,   70,   19,   26,   64,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   60,

       79,   70,   81,   26,   26,   26,   80,   26,   90,  527,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   88,   72,   32,
     1182,   32,   27, 1181,   74,   72,  284,   84,  103,   45,
       27,   27,   27,   27,   27,   27,   32,   32,   88,   45,
       32,   32,   45,   33,   74,   32,   45,   37,   32,   33,
       33,   85,  103,   33,   84,   37,   33,   32,   36,   37,
       36,   72,  284,   36,   86,   37,   33,   37,   46,   36,

       46,   36,   43,   43,   43,   48,   46,   36,   85,   46,
       46,   36,   43,   46,   43,   46,   46,   51,   46,   51,
       43,   82,   86,   48,   51,   76,   87,   48, 1180,   95,
      497,   76,  117,   82,   51,   94,  497,  117, 1179,   77,
       89,   48,   49,   49,   49,   77,   49,   49,   94,   76,
       49,   91,   82,   87,   49,   49,   83,   89,   49,   95,
      102,   49,   49,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   83,   63,  100,   77,   91,
       92,   91,   83,   96,   93,  102,  104,  113,   99,   96,
       63,   63,   63,   63,   63,  106,   98,  100,   63,   93,

       63,   63,   97,   99,   92,  105,  120,   96,   97,   98,
      107,   92,  108,  101,   92,  287,  287, 1178,  104,  105,
      118,  106,  120,  107,  113,  114,  116,   98,  101,   63,
       63,   63,   63,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   97,  109,  101,  108,  110,  111,  112,
       65,  115,  118,  114,  121,  119,  109,  116,  124,  130,
      110,  125,  112,  111,  115,  122,  115,  131,  126,  111,
      119,  127,  128,  137,  142,  130,  124,  133,  121,   65,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
      122,  122,  131,  125,  142,   66,  126,  127,  135,  129,

      133,  137,  128,   66,   66,   66,   66,   66,   66,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
      129,  135,  134,  135,   73,  123,  132,  136,  139,  129,
      140,  141,   73,   73,   73,   73,   73,   73,  123,  134,
      143,  132,  146,  138,  141,  136,  144,  147,  138,  134,
      150,  123,  153,  151,  155,  123,  138,  146,  148,  132,
      147,  140,  145,  139,  140,  145,  145,  144,  138,  149,
      152,  148,  143,  150,  150,  145,  151,  154,  156,  157,
      147,  155,  149,  152,  158,  153,  159,  161,  148,  169,
      174,  172,  170,  176,  171,  157,  156,  170,  158, 1177,

      173,  158,  169,  170,  184,  154,  172,  161,  197,  375,
      375,  177,  176,  174,  159,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  178,  164,  171,
      173,  177,  197,  180,  167,  168,  184,  190,  189,  181,
      178,  183,  164,  164,  164,  164,  164,  167,  168,  179,
      164,  181,  164,  164,  180,  193,  183,  185,  187,  167,
      168,  188,  179,  179,  192,  194,  198,  199,  179,  189,
      185,  187,  179,  191,  190,  195,  188,  192,  196,  202,
      209,  164,  164,  164,  164,  216,  194,  193,  203,  204,
      191,  205,  195,  196,  206,  207,  210,  198,  199,  200,

      200,  200,  200,  211,  209,  203,  204,  212,  205,  202,
      213,  210,  207,  214,  215,  206,  217,  216,  218,  211,
      220,  219,  221,  227,  212,  213,  224,  225,  229,  226,
      225,  228,  214,  219,  230,  217,  220,  232,  215,  224,
      225,  231,  233,  235,  229,  221,  226,  234,  228,  218,
      242,  236,  237,  238,  231,  227,  243,  245,  246,  234,
      239,  247,  232,  244,  235,  250,  242,  230,  236,  237,
      238,  231,  239,  233,  243,  244,  249,  251,  251,  247,
      252,  244,  249,  253,  237,  231,  250,  255,  245,  256,
      246,  258,  259,  252,  249,  262,  263,  264,  286,  253,

      266,  267,  249,  269,  255,  259,  268,  272,  262,  263,
      274,  251,  265,  265,  253,  270,  256,  271,  273,  268,
      265,  277,  275,  280,  276,  272,  258,  290,  270,  264,
      264,  269,  266,  277,  286,  267,  289,  281,  271,  275,
      270,  274,  283,  283,  283,  283,  270,  290,  273,  281,
      273,  276,  291,  280,  285,  285,  285,  285,  292,  270,
      288,  288,  288,  288,  293,  294,  289,  295,  296,  291,
      297,  299,  298,  302,  300,  292,  304,  294,  301,  294,
      306,  307,  294,  310,  311,  303,  313,  294,  299,  312,
      293,  314,  295,  300,  297,  301,  302,  303,  313,  315,

      317,  296,  298,  306,  312,  311,  303,  304,  316,  303,
      322,  323,  324,  307,  326,  328,  314,  317,  325,  303,
      310,  316,  329,  332,  331,  330,  333,  328,  334,  337,
      338,  340,  341,  336,  345,  343,  315,  348,  326,  331,
      324,  323,  330,  333,  325,  336,  351,  322,  343,  353,
      332,  352,  341,  338,  329,  345,  354,  356,  357,  337,
      358,  334,  340,  351,  352,  360,  353,  361,  362,  348,
      363,  364,  365,  367,  366,  368,  376,  369,  378,  354,
      361,  358,  379,  370,  357,  377,  380,  356,  371,  371,
      360,  366,  364,  365,  367,  369,  371,  385,  368,  370,

      386,  363,  389,  362,  390,  379,  377,  369,  378,  376,
      391,  391,  392,  459,  394,  395,  380,  396,  385,  397,
      398,  390,  399,  400,  392,  401,  403,  391,  406,  459,
      386,  426,  404,  423,  389,  394,  395,  405,  396,  425,
      411,  398,  427,  411,  400,  394,  404,  411,  404,  416,
      405,  397,  416,  406,  399,  428,  416,  401,  403,  424,
      423,  429,  405,  430,  431,  432,  424,  427,  426,  433,
      425,  434,  435,  405,  436,  439,  437,  432,  438,  444,
      441,  442,  428,  428,  440,  429,  428,  446,  449,  430,
      443,  448,  456,  458,  434,  447,  431,  436,  450,  440,

      440,  433,  437,  448,  438,  441,  439,  443,  442,  435,
      444,  436,  447,  451,  449,  450,  452,  453,  446,  454,
      456,  455,  457,  460,  461,  458,  462,  463,  452,  453,
      451,  466,  454,  455,  465,  467,  468,  469,  470,  461,
      471,  472,  475,  466,  476,  477,  477,  462,  457,  478,
      465,  467,  469,  479,  480,  470,  475,  463,  472,  481,
      460,  483,  466,  484,  478,  486,  485,  487,  468,  490,
      489,  476,  471,  488,  491,  492,  481,  479,  493,  487,
      494,  495,  504,  503,  496,  502,  480,  485,  490,  491,
      488,  506,  510,  483,  489,  484,  496,  486,  502,  492,

      505,  494,  517,  493,  511,  512,  513,  519,  495,  503,
      520,  521,  522,  525,  524,  526,  504,  505,  506,  510,
      513,  511,  512,  519,  529,  532,  530,  520,  533,  534,
      526,  522,  535,  537,  539,  521,  536,  517,  524,  530,
      535,  537,  536,  538,  529,  533,  525,  540,  532,  538,
      541,  542,  544,  543,  545,  540,  534,  546,  547,  548,
      549,  556,  551,  552,  553,  550,  539,  545,  554,  542,
      543,  555,  559,  549,  556,  552,  553,  546,  544,  550,
      554,  541,  551,  555,  550,  547,  557,  560,  550,  555,
      561,  548,  562,  563,  564,  550,  566,  567,  568,  559,

      569,  573,  557,  561,  560,  562,  564,  570,  563,  571,
      576,  568,  578,  569,  572,  577,  586,  581,  568,  570,
      575,  573,  568,  579,  580,  582,  583,  567,  584,  566,
      590,  572,  577,  578,  575,  571,  585,  587,  583,  575,
      579,  588,  576,  575,  581,  584,  589,  580,  586,  591,
      575,  585,  582,  575,  587,  592,  595,  583,  589,  596,
      599,  602,  588,  603,  604,  605,  591,  590,  592,  606,
      608,  607,  609,  610,  611,  603,  613,  614,  612,  624,
      620,  631,  606,  595,  615,  604,  616,  628,  621,  609,
      596,  605,  607,  599,  608,  612,  615,  622,  602,  610,

      616,  614,  630,  613,  620,  623,  611,  621,  631,  635,
      638,  624,  639,  628,  622,  640,  641,  623,  642,  646,
      644,  648,  649,  650,  656,  660,  659,  658,  661,  639,
      635,  662,  630,  641,  638,  663,  656,  665,  648,  650,
      664,  640,  666,  667,  662,  668,  642,  644,  658,  660,
      663,  646,  659,  669,  671,  670,  665,  672,  661,  649,
      673,  664,  668,  674,  675,  676,  666,  670,  677,  678,
      669,  679,  680,  667,  681,  682,  685,  671,  683,  687,
      672,  673,  689,  688,  674,  675,  690,  691,  693,  677,
      681,  680,  695,  692,  695,  678,  688,  676,  694,  683,

      696,  685,  697,  691,  698,  679,  692,  682,  699,  689,
      700,  694,  687,  701,  693,  702,  703,  704,  690,  705,
      706,  698,  707,  709,  696,  699,  708,  711,  712,  717,
      722,  714,  697,  704,  701,  715,  705,  718,  721,  708,
      725,  700,  727,  703,  709,  728,  706,  702,  707,  731,
      729,  732,  715,  718,  711,  712,  714,  717,  739,  735,
      740,  737,  722,  727,  738,  721,  729,  743,  732,  745,
      725,  744,  728,  752,  731,  727,  735,  737,  756,  758,
      740,  738,  760,  744,  763,  764,  766,  767,  768,  739,
      745,  743,  769,  771,  756,  760,  758,  770,  764,  772,

      752,  773,  779,  774,  775,  768,  778,  776,  777,  780,
      763,  774,  781,  782,  773,  785,  783,  769,  767,  786,
      777,  770,  776,  766,  784,  771,  787,  775,  781,  778,
      782,  788,  780,  783,  789,  791,  772,  790,  794,  779,
      792,  784,  793,  797,  795,  798,  800,  789,  799,  785,
      787,  801,  802,  786,  804,  790,  791,  792,  807,  793,
      795,  799,  808,  803,  788,  794,  802,  800,  809,  810,
      811,  798,  814,  812,  815,  797,  803,  801,  816,  817,
      804,  807,  818,  819,  820,  810,  815,  811,  821,  822,
      823,  809,  824,  826,  818,  828,  829,  817,  814,  808,

      812,  831,  832,  820,  830,  833,  837,  823,  834,  829,
      826,  835,  838,  836,  821,  816,  819,  831,  824,  822,
      840,  830,  837,  832,  835,  834,  843,  828,  836,  838,
      844,  833,  845,  847,  851,  853,  854,  866,  868,  855,
      870,  867,  861,  843,  875,  876,  865, 1176,  845,  866,
      853,  868,  870,  862,  844,  840,  855,  858,  858,  858,
      858,  858,  858,  858,  858,  847,  851,  858,  854,  861,
      862,  865,  867,  869,  871,  872,  874,  873,  879,  880,
      881,  875,  876,  882,  883,  885,  871,  872,  869,  873,
      886,  888,  887,  893,  889,  879,  890,  891,  895,  883,

      892,  902,  874,  903,  882,  894,  881,  887,  909,  880,
      889,  888,  890,  892,  895,  885,  898,  893,  899,  894,
      886,  900,  901,  904,  891,  905,  907,  908,  898,  903,
      899,  902,  910,  900,  901,  904,  911,  913,  912,  915,
      909,  914,  917,  920,  922,  921,  905,  907,  908,  923,
      924,  936,  927,  930,  911,  912,  914,  921,  910,  920,
      938,  939,  950,  955,  913,  927,  952,  953,  923,  915,
      930,  936,  917,  956,  961,  957,  958,  970,  950,  965,
      922,  959,  924,  960,  953,  967,  968,  961,  971,  973,
      977,  975,  938,  979,  939,  955,  965,  952,  957,  958,

      956,  978,  959,  968,  967,  982,  960,  977,  970,  983,
      984,  985,  986,  988,  989,  971,  973,  975,  996,  990,
      979,  992,  993,  991,  986,  978,  994,  997,  982,  999,
      989,  984,  983, 1001,  985,  993, 1003,  988,  990,  991,
     1005,  992, 1012, 1007, 1009, 1009, 1014,  994, 1016, 1017,
     1018,  996, 1019, 1003, 1020, 1021, 1022,  997, 1036, 1028,
     1001,  999, 1007, 1014, 1023, 1001, 1029, 1030, 1005, 1019,
     1017, 1020, 1012, 1022, 1016, 1028, 1018, 1032, 1023, 1030,
     1033, 1040, 1034, 1035, 1029, 1037, 1039, 1038, 1044, 1021,
     1045, 1046, 1036, 1040, 1032, 1047, 1049, 1050, 1033, 1034,

     1035, 1038, 1037, 1039, 1054, 1057, 1038, 1061, 1059, 1045,
     1038, 1060, 1062, 1063, 1065, 1066, 1067, 1054, 1068, 1071,
     1044, 1059, 1057, 1046, 1072, 1061, 1069, 1073, 1075, 1076,
     1077, 1049, 1047, 1067, 1050, 1078, 1068, 1071, 1060, 1066,
     1079, 1069, 1069, 1080, 1081, 1084, 1085, 1086, 1087, 1062,
     1063, 1065, 1078, 1076, 1091, 1092, 1100, 1093, 1080, 1097,
     1077, 1072, 1106, 1087, 1073, 1075, 1101, 1098, 1091, 1107,
     1108, 1109, 1085, 1084, 1079, 1086, 1097, 1081, 1093, 1098,
     1111, 1092, 1110, 1101, 1100, 1106, 1112, 1113, 1109, 1115,
     1118, 1114, 1120, 1108, 1123, 1124, 1173, 1122, 1132, 1131,

     1129, 1125, 1171, 1126, 1113, 1133, 1107, 1108, 1114, 1110,
     1111, 1120, 1122, 1125, 1118, 1126, 1131, 1130, 1112, 1132,
     1127, 1127, 1128, 1128, 1129, 1138, 1115, 1123, 1140, 1124,
     1127, 1142, 1128, 1130, 1143, 1133, 1144, 1145, 1146, 1150,
     1152, 1156, 1138, 1160, 1158, 1157, 1159, 1161, 1140, 1145,
     1146, 1163, 1142, 1166, 1165, 1167, 1150, 1143, 1156, 1144,
     1157, 1158, 1168, 1159, 1160, 1172, 1169, 1152, 1161, 1165,
     1166, 1170, 1174, 1174, 1175, 1175, 1162, 1163, 1155, 1154,
     1153, 1151, 1174, 1149, 1175, 1148, 1147, 1141, 1172, 1139,
     1137, 1135, 1167, 1134, 1121, 1119, 1117, 1116, 1105, 1168,

     1169, 1104, 1103, 1102, 1099, 1170, 1185, 1185, 1186, 1186,
     1186, 1187, 1187, 1187, 1096, 1095, 1094, 1090, 1089, 1088,
     1083, 1082, 1074, 1070, 1064, 1058, 1056, 1055, 1052, 1051,
     1048, 1043, 1042, 1041, 1031, 1027, 1026, 1025, 1024, 1015,
     1011, 1010, 1006, 1004, 1002, 1000,  998,  995,  987,  976,
      974,  972,  969,  966,  964,  963,  962,  954,  951,  949,
      948,  947,  946,  945,  944,  943,  942,  941,  940,  935,
      934,  933,  931,  929,  928,  926,  925,  919,  918,  916,
      906,  897,  896,  884,  878,  877,  864,  863,  860,  859,
      857,  856,  852,  850,  849,  846,  842,  841,  839,  825,

      813,  806,  805,  796,  765,  762,  761,  759,  757,  755,
      754,  753,  751,  750,  747,  746,  742,  741,  736,  734,
      733,  730,  726,  720,  716,  713,  710,  686,  657,  655,
      654,  653,  652,  651,  647,  645,  643,  637,  636,  634,
      633,  632,  629,  627,  626,  625,  619,  618,  617,  601,
      600,  598,  597,  594,  593,  574,  565,  558,  531,  528,
      523,  518,  516,  515,  514,  509,  508,  507,  499,  482,
      474,  473,  464,  445,  402,  393,  388,  387,  384,  383,
      382,  381,  374,  359,  355,  350,  349,  347,  346,  344,
      342,  339,  335,  327,  309,  308,  305,  282,  279,  278,

      261,  260,  257,  254,  248,  241,  240,  223,  222,  208,
      201,  186,  182,  175,  162,   71,   69,   59,   58,   52,
       47,   42,   40,   31,   25,   23,    6,    3, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183

    } ;

static yyconst flex_int16_t yy_rule_linenum[265] =
    {   0,
       45,   46,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  108,  109,  110,  112,  113,  114,  115,  116,  117,
      119,  121,  122,  123,  125,  126,  127,  128,  129,  131,
      132,  133,  134,  136,  137,  138,  139,  140,  141,  142,
      143,  145,  146,  147,  148,  149,  150,  151,  152,  153,

      154,  155,  156,  158,  159,  160,  161,  162,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  233,  234,  235,  236,  237,
      238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,

      259,  260,  261,  262,  263,  265,  266,  267,  268,  269,
      271,  272,  273,  275,  277,  278,  279,  280,  281,  282,
      283,  285,  287,  288,  289,  290,  291,  292,  293,  295,
      296,  297,  299,  300,  301,  303,  304,  305,  306,  307,
      308,  309,  310,  311,  312,  313,  315,  316,  317,  318,
      319,  320,  321,  322,  323,  324,  325,  327,  328,  329,
      331,  332,  333,  334
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2022 Xilinx, Inc.
* Copyright 2022-2023 Advanced Micro Devices, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 23 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 36 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1492 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 39 "../s/bif.l"



   yylloc->step ();


#line 1656 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1184 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1183 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 265 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 265 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 266 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 46 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::DELAY_AUTH;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "../s/bif.l"
return tok::BIF_SECTION;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "../s/bif.l"
return tok::LOCKSTEP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "../s/bif.l"
return tok::INCLUDE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 75 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 76 "../s/bif.l"
yylval->number = tok::RESERVE_LEGACY;           return tok::RESERVE_LEGACY;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::UNIQUE_ID;                return tok::UNIQUE_ID;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::PARENT_UNIQUE_ID;         return tok::PARENT_UNIQUE_ID;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::FUNCTION_ID;              return tok::FUNCTION_ID;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../s/bif.l"
yylval->number = tok::PCR_NUMBER;               return tok::PCR_NUMBER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::PCR_MEASUREMENT_INDEX;    return tok::PCR_MEASUREMENT_INDEX;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "../s/bif.l"
yylval->number = tok::IMAGE_STORE;              return tok::IMAGE_STORE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 112 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 114 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 116 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 117 "../s/bif.l"
yylval->number = tok::USER_KEYS;                return tok::USER_KEYS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 121 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 122 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 123 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 126 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 127 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 128 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 129 "../s/bif.l"
yylval->number = Authentication::ECDSAp521;     return tok::AUTHVALUE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 131 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 133 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 134 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 136 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 137 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;   return tok::PTYPEVALUE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = PartitionType::RAW;               return tok::PTYPEVALUE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = PartitionType::CFI;               return tok::PTYPEVALUE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;           return tok::PTYPEVALUE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;          return tok::PTYPEVALUE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;        return tok::PTYPEVALUE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE;         return tok::PTYPEVALUE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_BOOT;    return tok::PTYPEVALUE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_CONFIG;  return tok::PTYPEVALUE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = PartitionType::ELF;               return tok::PTYPEVALUE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = tok::PUFROSWAP;                return tok::PUFROSWAP;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = tok::DICE;                     return tok::DICE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = tok::A_HWROT;                  return tok::A_HWROT;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = tok::S_HWROT;                  return tok::S_HWROT;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 210 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 215 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 216 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 217 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 233 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 234 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 235 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 237 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 238 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 239 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 240 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 241 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 242 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 244 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 245 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 246 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 247 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 248 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 250 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 251 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 252 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 253 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 254 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 255 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = DestinationCPU::AIE;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 257 "../s/bif.l"
yylval->number = tok::CLUSTER_NUM;              return tok::CLUSTER_NUM;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 259 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 260 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 261 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 262 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 263 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 265 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 266 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 267 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 268 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 269 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 271 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 272 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 273 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 275 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 277 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 278 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 279 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 280 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 281 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 282 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 283 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 285 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 287 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 288 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 289 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 290 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 291 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 292 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 293 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 295 "../s/bif.l"
yylval->number = tok::AUTHJTAG_CONFIG;          return tok::AUTHJTAG_CONFIG;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 296 "../s/bif.l"
yylval->number = tok::DEVICE_DNA;               return tok::DEVICE_DNA;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 297 "../s/bif.l"
yylval->number = tok::JTAG_TIMEOUT;             return tok::JTAG_TIMEOUT;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 299 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 300 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 301 "../s/bif.l"
yylval->string=strdup(yytext);                  return tok::HEXWORD;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 303 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 304 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 305 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 306 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 307 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 308 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 309 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 310 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 311 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 312 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 313 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 315 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 316 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 317 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 318 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 319 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 320 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 321 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 322 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 323 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 324 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 325 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 327 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 328 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 329 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 331 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 332 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 333 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 334 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 335 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3092 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1184 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1184 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1183);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 335 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

