#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 247
#define YY_END_OF_BUFFER 248
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1111] =
    {   0,
        0,    0,  248,  246,  243,  244,  245,  246,  235,  237,
      226,  227,  228,  229,  221,  230,  241,  234,  215,  215,
      218,  219,  246,  220,  246,  217,  240,  222,  223,  239,
      240,  217,  217,  217,  217,  217,  217,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  224,  238,  225,  236,  243,  244,    0,    0,
      241,    1,  241,  215,  217,  241,  231,  232,  217,    0,
      240,  217,  217,  240,  217,  217,  217,  240,  240,  240,
      217,  240,  240,  240,  240,  240,  217,  217,  240,  240,
      217,  240,  217,  217,  217,  240,  240,  240,  240,  217,

      240,  240,  240,  240,  240,  240,   48,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  185,  240,
      240,  240,  184,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  242,    0,    0,
        2,  241,  216,    0,  217,  240,  217,  240,  240,  217,
       68,  182,  240,  240,  240,  240,  240,  240,  211,  240,
      240,  240,   88,   90,  240,  240,  240,  240,  240,  240,
      240,  240,  217,  240,  241,  240,  240,  240,  240,  240,

      240,  209,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  210,   75,  240,  151,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
       32,   84,   82,  180,  240,  240,  240,  240,  181,  240,
      240,  241,  240,   89,  240,  240,   70,  240,  240,  158,
      241,  148,  149,  240,  240,  240,  240,  196,  240,  240,
      240,  240,  240,  240,  240,  240,  240,   56,  152,  240,
      187,    0,  241,  240,  241,  240,  241,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,    7,  240,  241,  240,   30,  166,  240,  240,  240,

      240,  240,  240,  240,  189,  190,  191,  192,  240,  240,
      240,  240,  240,   50,   80,  240,  240,  240,  240,  240,
       33,  240,  240,  240,   29,  240,  241,  163,  206,  240,
       49,  147,  240,  241,   67,  240,  240,  240,  240,  156,
      240,  240,  240,  154,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  177,  178,  241,  240,  240,
      240,  240,  240,  155,  241,  241,  241,  240,  240,   76,
       77,  240,  240,  241,  157,  241,  240,  240,  240,  240,
      240,  240,  240,  240,   87,  240,  240,    8,  240,  167,
      170,  173,  175,  240,  169,  172,  174,  176,  240,  168,

      171,  240,  240,  240,  240,  240,  240,  240,  240,  240,
       98,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  241,  240,  240,  240,  240,  240,  240,
       71,   97,  240,  240,  240,  240,  240,  240,  240,  240,
       17,  240,   23,  240,  240,  240,  240,  241,  241,  240,
      240,  241,  240,  240,  240,  240,   79,  240,  240,  240,
      186,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  241,  240,  240,  240,  240,  240,  150,  241,  241,
      240,  240,  240,  240,  241,  241,  241,  240,  241,  240,
      240,  240,  240,  205,  240,  240,  240,  240,   81,  240,

      240,  241,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,   18,  240,
      240,  240,  240,  240,  240,  241,  240,  240,  240,  240,
      240,  240,  241,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,   96,  240,  240,  241,  241,
      240,  240,  241,  241,  240,  208,   26,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      146,  145,  241,  240,  240,  240,  240,  240,  241,  241,
      241,  240,  194,  240,  240,  241,  241,  241,  240,  241,

      202,  240,  240,  240,  240,  240,    9,  240,   34,  240,
      241,  240,  240,  240,  126,  128,  127,  129,  141,  240,
      144,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,   91,  240,  240,
      240,  240,  240,  240,  240,  241,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
       46,  240,  240,  240,  121,  240,  162,  241,  240,  240,
       85,   83,  240,  135,  240,  240,   54,  240,  240,   36,
        4,  240,   37,  240,  240,  240,  241,  130,  240,   28,

      240,  142,  241,  159,  160,   25,  137,  240,  241,  241,
      241,  240,  241,  240,   38,  240,   39,   31,  240,  240,
      241,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,   74,  240,  240,  240,  240,  240,  240,  241,  241,
      240,  240,  240,  240,  240,  240,  153,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  164,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,   52,
      133,  241,  240,  240,  240,  241,  240,   92,  241,  241,

      240,  241,  240,  240,  240,    5,  241,  240,   64,    6,
      240,  240,   13,  134,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,   60,   55,  240,  240,
      240,  240,  240,   44,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  241,  241,  240,  240,  240,  240,  240,
      240,  240,  240,   65,  240,  240,  240,  240,  240,  240,
      240,  240,   11,  240,  195,   45,  240,   22,  240,  240,
       12,  136,  241,  125,  240,  204,  161,  207,  241,   94,
      240,  200,  240,  240,  193,  241,  107,  108,  109,  110,
      111,  112,  113,  114,  240,   35,  240,  240,   19,  240,

      240,  240,  240,  240,  240,  240,  106,  105,   51,  240,
       20,  240,  240,    3,  240,  240,  240,   16,  240,  213,
      240,  240,   72,   73,  240,  240,  240,  240,  240,   66,
      240,  240,  240,  240,  240,  240,  240,  240,  240,   24,
      240,   57,  240,  240,  198,  241,  240,   93,  139,  199,
      240,  201,  240,  197,  240,  240,  240,  240,  240,  240,
      240,  240,   41,  123,  143,   43,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  122,   58,
      203,  240,  240,  240,  240,   10,  240,  240,   53,  179,
      240,  240,   21,  240,  240,  240,  240,  240,   59,  240,

      240,  240,  240,  240,  138,  240,  240,  240,   61,  240,
      240,  240,  240,  240,  240,  240,  124,  214,  240,  240,
      240,  240,   40,  240,  240,  240,  103,  104,  102,  240,
      240,   15,  240,  240,   14,  100,  101,   99,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,   69,
      240,  131,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,   86,   27,  240,  212,  240,  165,
      240,  240,  240,  240,  240,  115,  118,  188,  240,   42,
      240,   78,  132,  240,  240,  240,  240,  240,  240,   47,
      240,  240,  240,  240,  240,  240,  240,   95,  240,  183,

      240,  240,   62,   63,  140,  116,  119,  117,  120,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,    6,   33,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   35,   34,   34,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    1,    3,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1115] =
    {   0,
        0,    0, 2297, 2298,   69, 2293, 2298,   70, 2298, 2298,
     2298, 2298, 2298,    0, 2298,    0,    0,   60,  119,   38,
     2298, 2298, 2265, 2298, 2262,  171,  220, 2298, 2298, 2298,
     2265,  227,  232,  103,  103,  248,  237,  108,  122, 2232,
       37, 2236,  124,  115,  214,  258, 2231,  280,  300,   41,
      271, 2240, 2298, 2298, 2298, 2298,  169, 2285, 2280,  173,
        0, 2298,  360,  138,  413,  460, 2298, 2298, 2258,  232,
     2257,  254,  489,  257,  152,   64,  189,  264,  154,  223,
      235,  295,  153,  267,  276,  122,  318,  306,  301,  278,
      323,  296,  329,  307,  356,  365,  304,  329,  351,  330,

      350,  353,  358,  330,  367,  379,  369,  373,  375,  377,
      378,  388,  382,  387,  231,  391,  414,  376,  393,  419,
      434,  421,  394,  397,  398,  431,  422,  430,  437,  433,
      440,  491,  467,  493,  441,  509,  435,  495,  497,  499,
      436,  501,  525,  427,  500,  514,  517,  523,  520,  524,
      438,  528,  531,  532,  535,  538,  534, 2298,  550, 2281,
     2298,  590,    0,    0,  549,  595,  313,  540,  542,  553,
      554, 2255,  560,  584,  586,  589,  585,  597, 2254,  581,
      548,  605, 2253,  623,  611,  578,  616,  614,  587,  613,
      620,  617,  557,  621,  646,  624,  625,  628,  640,  622,

      644, 2252,  646,  647,  648,  649,  650,  653,  651,  655,
      656,  659,  660, 2251, 2250,  667,  688,  668,  658,  669,
      663,  673,  694,  677,  682,  684,  689,  691,  692,  695,
     2249, 2248,  698,  697,  704,  699,  700,  701, 2247,  723,
      705,  730,  718, 2246,  727,  728, 2245,  703,  729, 2244,
     2219,  746,  750,  707,  759,  731,  736,  758,  741,  760,
      753,  748,  756,  761,  762,  757,  764, 2242, 2241,  765,
      768, 2261,  806,  767,  814,  773,   82,  771,  782,  777,
      783,  472,  808,  785,  781,  787,  789,  812,  813,  816,
      815,  823,  790, 2220,  817, 2238, 2237,  818,  824,  826,

      827,  828,  836,  831,    0,    0,    0,    0,  834,  837,
      842,  843,  839, 2236,  846,  850,  851,  859,  853,  856,
     2235,  854,  860,  861, 2234,  872, 2203,  875, 2232,  864,
     2231, 2230,  876, 2201, 2228,  877,  878,  879,  881, 2227,
      883,  886,  888, 2226,  887,  889,  895,  893,  897,  898,
      899,  902,  775,  901,  929,    0,    0, 2198,  903,  906,
      905,  907,  910, 2224, 2192, 2192, 2191,  911,  916, 2220,
     2219,  919,  928,  919,  931, 2201,  923,  937,  938,  939,
      941,  942,  947,  948, 2217,  949,  953,  965,  957,    0,
        0,    0,    0,  970,    0,    0,    0,    0,  979,    0,

        0,  956,  985,  955,  960,  964,  973,  984,  961,  990,
      991,  992,  976,  993,  994,  995, 1002,  996,  998, 1007,
     1006, 1009, 1005, 2185, 1010, 1011, 1012, 1018, 1025, 1034,
     1029, 1039, 1015, 1019, 1020, 1040, 1042, 1044, 1047, 1048,
     2215, 1049, 1050, 1053, 1054, 1055, 1057, 2201, 2183, 1061,
     1060,  204, 1058, 1064, 1063, 1066, 2212, 1067, 1070, 1071,
     1077, 1076, 1080, 1081, 1082, 1084, 1086, 1091, 1094, 1096,
     1109, 2196, 1092, 1098, 1107, 1110, 1113, 2223, 2196, 2195,
     1115, 1114, 1116, 1118, 2180, 2179, 2181, 1117, 2186, 1119,
     1120, 1121, 1125, 2203, 1122, 1123, 1128, 1126, 2202, 1129,

     1134, 2184, 1130, 1138, 1136, 1158, 1154, 1159, 1166, 1139,
     1165, 1161, 1162, 1167, 1168, 1169, 1170, 1172, 1173, 1174,
     1177, 1175, 1176, 1181, 1185, 1186, 1189, 1201, 2200, 1179,
     1203, 1208, 1209, 1210, 1211, 2184, 1183, 1212, 1213, 1215,
     1214, 1218, 2170, 1228, 1224, 1229, 1219, 1233, 1230, 1235,
     1237, 1243, 1248, 1234, 1239, 1245, 1241, 1254, 2162, 2183,
     1244, 1252, 2170, 2179, 1259, 2193, 2192, 1263, 1268, 1266,
     1269, 1270, 1272, 1273, 1275, 1276, 1277, 1279, 1281, 1284,
     2191, 2190, 2166, 1285, 1288, 1286, 1299, 1289, 2158, 2152,
     2151, 1293, 2185, 1295, 1297, 2157, 2157, 2169, 1302, 2148,

     2180, 1304, 1310, 1312, 1313, 1314, 2179, 1316, 2178, 1315,
     2159, 1317, 1318, 1320, 2176, 2175, 2174, 2173, 2172, 1329,
     2171, 1331, 1322, 1326, 1332, 1333, 1339, 1335, 1340, 1337,
     1344, 1349, 1351, 1345, 1353, 1358, 1363, 1364, 1365, 1360,
     1367, 1369, 1370, 1371, 1373, 1375, 1372,    0, 1377, 1378,
     1379, 1380, 1382, 1383, 1387, 1401, 1397, 1399, 1401, 1403,
     1405, 1410, 1408, 1411, 1414, 1415, 1413, 1416, 1422, 1423,
     2170, 1419, 1424, 1417, 2169, 1425,    0, 2133, 1426, 1427,
        0,    0, 1428, 2167, 1433, 1437, 2166, 1443, 1445, 2165,
     2164, 1448, 2163, 1447, 1450, 1451, 2131, 2161, 1452, 1457,

     1456, 2160, 2146,    0,    0, 2158, 2157, 1455, 2124, 2137,
     2120, 1470, 2122, 1461, 2152, 1460, 2151, 2150, 1472, 1474,
     2116, 1475, 1479, 1480, 1481, 1483, 1484, 1485, 1488, 1499,
     1490, 1489, 1493, 1492, 1494, 1495, 1503, 1500, 1508, 1509,
     1496, 1502, 1511, 1514, 1520, 1521, 1523, 1524, 1528, 1527,
     1532, 2148, 1529, 1537, 1538, 1534, 1540, 1542, 2149, 2154,
     1543, 1546, 1549, 1551, 1552, 1557, 2145, 1556, 1558, 1561,
     1562, 1563, 1564, 1571, 1565, 1576, 1573, 1577,    0, 1574,
     1579, 1578, 1585, 1581, 1586, 1587, 1588, 1589, 1596, 2144,
     2143, 2110, 1604, 1607, 1608, 2106, 1609,    0, 2119, 2122,

     1610, 2121, 1611, 1614, 1615, 2137, 2105, 1643, 2135, 2134,
     1617, 1628, 2133, 2132, 1622, 1618, 1619, 1616, 1648, 1649,
     1652, 1653, 1654, 1625, 1620, 1623, 2131, 2130, 1655, 1656,
     1658, 1659, 1662, 2129, 1667, 1668, 1670, 1671, 1673, 1669,
     1675, 1676, 1678, 2134, 2136, 1679, 1681, 1683, 1692, 1682,
     1674, 1699, 1701, 2126, 1702, 1703, 1705, 1706, 1707, 1708,
     1713, 1709, 2125, 1710, 2124, 2123, 1714, 1715, 1717, 1716,
     2122, 2121, 2103, 2119, 1721, 2118,    0, 2117, 2097,    0,
     1726,    0, 1718, 1719, 2115, 2097, 2113, 2112, 2111, 2110,
     2109, 2108, 2107, 2106, 1729, 2105, 1720, 1741, 2104, 1731,

     1733, 1734, 1742, 1743, 1744, 1749, 2103, 2102, 2101, 1753,
     2100, 1747, 1754, 2099, 1755, 1756, 1761, 2098, 1759, 2097,
     1768, 1769,    0,    0, 1772, 1774, 1773, 1775, 1777, 2096,
     1776, 1787, 1780, 1790, 1781, 1778, 1784, 1779, 1793, 2095,
     1782, 2094, 1802, 1804, 2093, 2064, 1807,    0, 2091, 2090,
     1808,    0, 1810, 2089, 1809, 1811, 1813, 1816, 1819, 1815,
     1820, 1817, 2088, 2087, 2086, 2085, 1824, 1825, 1818, 1828,
     1841, 1844, 1846, 1822, 1847, 1848, 1851, 1842, 2084, 2083,
     2082, 1850, 1853, 1852, 1855, 2081, 1858, 1857, 2080,    0,
     1860, 1866, 2079, 1865, 1869, 1870, 1874, 1875, 2078, 1876,

     1877, 1880, 1881, 1887, 2077, 1886, 1879, 1885, 2076, 1889,
     1890, 1891, 1898, 1895, 1905, 1900, 2075, 2074, 1906, 1909,
     1908, 1910, 2061, 1917, 1918, 1907, 2060, 2059, 2058, 1923,
     1927, 2057, 1919, 1924, 2056, 2054, 2053, 2052, 1930, 1932,
     1937, 1938, 1943, 1942, 1945, 1946, 1948, 1949, 1951, 2051,
     1952, 2050, 1958, 1950, 1954, 1956, 1964, 1989, 1991, 1961,
     1962, 1967, 1966, 1990, 2049, 2048, 1992, 2046, 1993, 2044,
     1994, 1995, 1996, 1998, 1999, 2043, 2042, 2041, 1997, 2040,
     2000, 2039, 2033, 2004, 2001, 2005, 2006, 2003, 2007, 1959,
     2008, 2002, 2012, 2025, 2026, 2030, 2031, 1957, 2032, 1627,

     2045, 2047, 1178,  693,  553,  432,  428,  384,  230, 2298,
      152, 2092, 2095, 2098
    } ;

static yyconst flex_int16_t yy_def[1115] =
    {   0,
     1110,    1, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1111, 1110, 1111, 1111, 1111, 1111,   19,
     1110, 1110, 1110, 1110, 1110, 1110,   26, 1110, 1110, 1110,
       27,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1110, 1110, 1110, 1110, 1110, 1110, 1112, 1112,
     1111, 1110, 1113,   19,   19,   65, 1110, 1110,   26, 1110,
       27,   26,   27,   27,   73,   73,   73,   27,   27,   27,
       73,   27,   27,   27,   27,   27,   73,   73,   27,   27,
       73,   27,   73,   73,   73,   27,   27,   27,   27,   73,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1110, 1110, 1114,
     1110, 1113,   66, 1111,   73,   27,   73,   27,   27,   73,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   73,   27, 1111,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1111,   27,   27,   27,   27,   27,   27,   27,   27,
     1111,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1112, 1111,   27, 1111,   27, 1111,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1111,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27, 1111, 1111, 1111, 1111,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1111,   27,   27,   27,
       27,   27,   27, 1111,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1111, 1111, 1111,   27,   27,
       27,   27,   27,   27, 1111, 1111, 1111,   27,   27,   27,
       27,   27,   27, 1111,   27, 1111,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1111,
     1111, 1111, 1111,   27, 1111, 1111, 1111, 1111,   27, 1111,

     1111,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1111,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1111, 1111,   27,
       27, 1111,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1111,   27,   27,   27,   27,   27, 1111, 1111, 1111,
       27,   27,   27,   27, 1111, 1111, 1111,   27, 1111,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27, 1111,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1111,   27,   27,   27,   27,
       27,   27, 1111,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1111, 1111,
       27,   27, 1111, 1111,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1111,   27,   27,   27,   27,   27, 1111, 1111,
     1111,   27,   27,   27,   27, 1111, 1111, 1111,   27, 1111,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1111,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1111,   27,   27,
       27,   27,   27,   27,   27, 1111,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1111, 1111,   27,   27,
     1111, 1111,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1111,   27,   27,   27,

       27,   27, 1111, 1111, 1111,   27,   27,   27, 1111, 1111,
     1111,   27, 1111,   27,   27,   27,   27,   27,   27,   27,
     1111,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1111, 1111,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1111,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1111,   27,   27,   27, 1111,   27, 1111, 1111, 1111,

       27, 1111,   27,   27,   27,   27, 1111,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1111, 1111,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1111,   27,   27,   27, 1111,   27, 1111, 1111,
       27, 1111,   27,   27,   27, 1111,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1111, 1111,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1111,   27, 1111,   27,   27,
       27, 1111,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1111,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,    0,
     1110, 1110, 1110, 1110
    } ;

static yyconst flex_int16_t yy_nxt[2369] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   17,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   27,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   27,   27,   52,   27,   27,   53,   54,   55,   56,
       57,   62,   61,   57,   59,   59,   63,   59,   59,   59,
       59,  111,   59,   69,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  112,  151,  400,

      401,   61,   60,   60,   60,  152,   59,  170,   59,   59,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   87,   91,   88, 1110,
       89,   65,  105,   66,   61,  120,  106,   90,   92,   65,
       65,   65,   65,   65,   65,  107,  114,  115,  116,  121,
       57,   69,   61,   57,  108,  109,  117,  182,  118,  158,
     1110, 1110,   66,   61,  119,   61,   61,   61,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   70,  178,

      159,   61,  173,   69,   71,   71,  179,   61,   69,  169,
       71,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,  171,  164,   72,
     1110,   73,   71,  215,   69,  563,  564, 1110, 1110,  122,
       71,   71,   71,   71,   71,   71,   74,   75,  164,  123,
       76,   77,  124,   81,  165,   78,  125,  100,   79,   82,
       83, 1110,  174,   84, 1110,  101,   85,   80,   93,  102,
       94, 1110,  175,   95, 1110,  103,   86,  104,  126,   96,

      127,   97,  136, 1110,  168, 1110,  128,   98,  172,  129,
      130,   99,  153,  131,  154,  132,  133,  166,  134,  155,
      137,  180, 1110, 1110,  138,   69,   69,  277, 1110,  156,
      181, 1110,   69,  186,  176,  187,  191,   69,  139,  140,
      141,  142,   69,  143,  144,  185,  196,  145,   69,   69,
      193,  146,  147,  177,  184,  148, 1110, 1110,  149,  150,
      160,  160,  161,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  183,  160,  188,   69,  197, 1110, 1110,  195,
     1110,  189,  200,  204,  190, 1110,  192,  160,  160,  160,
      160,  160, 1110,  198, 1110,  160, 1110,  160,  160,  203,

     1110,  201, 1110, 1110, 1110, 1110, 1110,  205,  207, 1110,
      199, 1110,  202,  208, 1110, 1110,  194,  210, 1110,  218,
     1110, 1110,  213,  209, 1110, 1110,  160,  160,  160,  160,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      206, 1110,  211,  212,  219,  214, 1110,   61, 1110, 1110,
      216,  228,  227,  226, 1110, 1110,  217, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110,  225, 1110, 1110,  254,
      230,  220,  221,  231,  222,  233,   61,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  223,  229,  232,
      235,  224,  163,  234, 1110,  249,  241,  244,  264, 1110,

      163,  163,  163,  163,  163,  163,   69,   69,  167,   69,
       69,   69,   69,   69,   69,   69, 1110,  238, 1110,  239,
     1110,   69, 1110,  242, 1110,  406, 1110, 1110, 1110,   69,
       69,   69,   69,   69,   69,  236, 1110,  247,  240,  251,
      255, 1110,  252,  253, 1110,  237,  248, 1110,  243,  250,
     1110, 1110, 1110,  245,  257, 1110,  246,  259, 1110, 1110,
      256, 1110, 1110,  273,  263, 1110,  272, 1110,   69, 1110,
      262,  258,   69,  260,  261, 1110,   69,  267,  268,  269,
     1110, 1110,  270,  265,  279,  266,  272, 1110,  274,  271,
      160,  160,  161,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  278,  160,  281, 1110,  282,  292, 1110,  275,
      280, 1110, 1110, 1110, 1110,  303, 1110,  160,  160,  160,
      160,  160, 1110,  291, 1110,  160,  284,  160,  160,  285,
      286,  283, 1110,  289,  276,  287,  290,  294, 1110,  288,
     1110, 1110,  296, 1110, 1110,  293,  299, 1110, 1110, 1110,
     1110, 1110, 1110,  295,  298, 1110,  160,  160,  160,  160,
      297,  300,  301,  305,  306,  307,  308, 1110,  302,  310,
      313, 1110,  311, 1110, 1110, 1110, 1110, 1110, 1110,  304,
     1110,  309, 1110, 1110,  312, 1110, 1110, 1110,  314,  316,
     1110,  317,  319,  318, 1110, 1110, 1110,  315,  324,  320,

     1110,  322,  327,  325, 1110,  328,  332,  326,  334, 1110,
      321, 1110,  329,  331,  323, 1110, 1110,  330, 1110, 1110,
     1110, 1110, 1110,  339, 1110, 1110, 1110, 1110, 1110,  337,
     1110, 1110, 1110,  333, 1110,  341,  342,  340,  335,  344,
      338,  345,  346,  347,  352, 1110,  351,  356,  357,  348,
     1110,  343,  336,  355, 1110, 1110, 1110,  349, 1110,  350,
      366,  359,  353, 1110,  367,  363,  368,  369, 1110,  364,
      354,  361,  374, 1110,  376, 1110,  360, 1110,  370,  371,
     1110,  358,  362, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
      372, 1110, 1110,  381, 1110, 1110,  375,  373, 1110,  377,

     1110,  380, 1110,  387, 1110,  378,  385,  389, 1110, 1110,
     1110,  386, 1110,  382, 1110,  383, 1110, 1110,  379,  384,
      468,  404,  388,  390,  391,  392,  393,  405,  402,  403,
      394,  395,  396,  397,  398, 1110,  399,  411,  413, 1110,
     1110,  412, 1110, 1110, 1110, 1110,  414,  407,  423,  408,
     1110, 1110,  409, 1110, 1110, 1110,  415,  410, 1110,  416,
      417, 1110,  419, 1110, 1110,  418, 1110,  425,  428, 1110,
     1110,  420,  427, 1110,  421,  432,  431, 1110, 1110,  429,
     1110, 1110,  426, 1110,  422,  438, 1110, 1110, 1110,  449,
      437, 1110,  430,  444,  434,  440,  436,  435,  433, 1110,

      443,  441, 1110, 1110, 1110, 1110, 1110,  442, 1110,  439,
     1110,  446,  450, 1110, 1110, 1110, 1110,  445,  454,  447,
     1110,  453, 1110,  455, 1110, 1110, 1110,  460, 1110, 1110,
     1110,  456, 1110, 1110, 1110,  451,  459, 1110, 1110,  458,
      457,  463,  465, 1110,  469,  464, 1110,  466,  470,  471,
     1110,  461,  467,  462,  474, 1110, 1110,  476, 1110,  481,
      485,  486,  475,  473, 1110, 1110, 1110,  477, 1110, 1110,
      488,  490,  484,  482, 1110, 1110, 1110,  487,  483,  502,
     1110,  491, 1110, 1110, 1110,  492,  493, 1110, 1110,  495,
      506, 1110, 1110,  507,  500,  497,  501, 1110,  494,  508,

     1110,  496,  509, 1110,  503,  511, 1110,  498,  499,  505,
      510, 1110, 1110,  512,  519,  504,  514, 1110, 1110, 1110,
     1110, 1110, 1110, 1110,  513, 1110,  523,  515,  516, 1110,
      521,  517, 1110, 1110, 1110,  518, 1110, 1110, 1110, 1110,
      530,  531, 1110,  543,  525, 1110, 1110, 1110,  527,  520,
      538,  522, 1110,  534,  529,  528, 1110,  524,  526,  532,
      533, 1110,  540,  535,  541,  539, 1110, 1110,  537, 1110,
      545, 1110,  546,  542, 1110, 1110, 1110, 1110,  544,  547,
     1110, 1110, 1110,  548, 1110, 1110,  550, 1110, 1110,  554,
     1110, 1110,  553, 1110, 1110,  551,  556, 1110, 1110,  557,

      565,  558,  561, 1110, 1110,  552,  549, 1110, 1110, 1110,
      568, 1110,  555, 1110,  562,  566,  572,  581, 1110, 1110,
      573, 1110,  567, 1110,  576, 1110,  569,  575,  582,  570,
      571,  574,  584,  580, 1110,  577, 1110, 1110,  578,  579,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110,  585, 1110, 1110,  587, 1110, 1110, 1110,  593,  595,
      594, 1110,  601, 1110,  602, 1110, 1110,  588,  586,  592,
      607,  604,  603,  605,  610,  616,  609,  615,  617,  599,
      612, 1110,  613,  606,  620, 1110, 1110,  618, 1110, 1110,
      614,  608, 1110, 1110, 1110, 1110, 1110, 1110,  619, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110,  622, 1110,  625,
     1110,  623, 1110, 1110,  629,  635, 1110,  626,  630,  621,
      636,  624,  634,  631,  637,  638,  627,  632, 1110,  640,
     1110,  639,  628,  642,  633, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110,  649,  641, 1110, 1110,  643,  644,  645,
      647, 1110,  646,  652,  653, 1110, 1110, 1110,  654,  650,
     1110, 1110, 1110,  651, 1110,  655, 1110,  664, 1110,  657,
     1110, 1110, 1110,  663,  658, 1110,  672,  665,  659, 1110,
      666, 1110,  669,  662,  674,  660, 1110,  673,  661,  667,
     1110,  668,  671, 1110,  676, 1110, 1110, 1110,  679, 1110,

     1110,  670, 1110, 1110, 1110,  675, 1110,  685, 1110,  687,
      680, 1110, 1110, 1110,  686, 1110, 1110,  690,  688,  683,
     1110,  693, 1110,  689, 1110,  696, 1110,  684,  691, 1110,
      700, 1110,  695,  694,  699,  692,  698, 1110,  701, 1110,
     1110, 1110, 1110, 1110, 1110, 1110,  706, 1110,  702, 1110,
      712,  708,  707, 1110,  715,  714, 1110,  717, 1110, 1110,
     1110,  722, 1110,  724, 1110,  716, 1110, 1110,  725,  718,
      719, 1110, 1110,  730,  720,  727, 1110,  728, 1110,  726,
     1110,  731,  723,  732,  738, 1110,  733, 1110,  734,  729,
     1110, 1110, 1110,  736, 1110,  737, 1110, 1110, 1110, 1110,

     1110,  735, 1110,  739, 1110, 1110, 1110, 1110,  740, 1110,
     1110,  741,  742,  743, 1110,  745,  749,  748,  753,  744,
      751,  759,  746,  760, 1110,  756, 1110,  758, 1110,  752,
     1110,  747, 1110,  754,  750, 1110,  757, 1110, 1110,  755,
     1110, 1110, 1110, 1110, 1110,  763, 1110,  764,  761, 1110,
     1110, 1110, 1110, 1110, 1110, 1110,  762,  769,  766,  770,
     1110,  777,  773,  765, 1110,  768,  771,  767,  778,  772,
     1110,  774, 1110,  775, 1110, 1110,  776, 1110, 1110, 1110,
      780,  783, 1110, 1110, 1110,  782,  781, 1110, 1110,  787,
      789,  785,  788,  784,  790,  786,  794, 1110,  791, 1110,

      804, 1110, 1110,  793,  795,  803, 1110, 1110, 1110,  797,
     1110, 1110, 1110,  801,  806, 1110, 1110, 1110,  816, 1110,
     1110, 1110, 1110, 1110,  810,  805, 1110, 1110,  815, 1110,
     1110,  818,  819,  811,  812, 1110, 1110,  809, 1110,  808,
      817, 1110,  820,  813,  824,  822,  823, 1110, 1110,  814,
     1110, 1110,  825,  826, 1110, 1110, 1110,  827,  821, 1110,
      831, 1110,  829,  828, 1110, 1110,  832, 1110,  834, 1110,
     1110,  833,  835, 1110,  830,  837, 1110,  839, 1110, 1110,
      842,  836,  838, 1110, 1110, 1110,  840,  841, 1110, 1110,
     1110, 1110, 1110,  846,  849,  843,  850,  853, 1110,  848,

     1110, 1110,  856, 1110, 1110, 1110, 1110,  855, 1110,  852,
      847,  851, 1110, 1110, 1110, 1110, 1110,  858,  859,  864,
      860,  862,  865, 1110,  857,  854,  861,  869,  866,  867,
      870, 1110,  871,  863, 1110, 1110, 1110, 1110, 1110,  868,
      872, 1110, 1110, 1110, 1110, 1110, 1110, 1110,  874, 1110,
     1110,  876, 1110,  883, 1110, 1110,  900,  898,  875,  885,
      887,  888,  889,  890,  891,  892,  893,  894,  878,  881,
     1110,  895,  896,  884,  897, 1110, 1110,  899,  906, 1110,
     1110, 1110, 1110, 1110,  907, 1110, 1110,  908,  902, 1110,
      901,  903,  904,  905, 1110, 1110, 1110, 1110, 1110,  909,

     1110, 1110, 1110, 1110,  913, 1110, 1110,  912, 1110, 1110,
     1110,  911,  916,  910,  917,  920,  918,  921,  925, 1110,
      926,  922,  927,  919,  914,  915, 1110,  930, 1110, 1110,
     1110,  928, 1110, 1110, 1110, 1110, 1110, 1110,  931,  929,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,  932,
      933,  934,  937, 1110,  943,  939, 1110,  942, 1110,  936,
     1110, 1110,  938,  944,  935,  947,  940,  941, 1110, 1110,
     1110, 1110,  953,  949, 1110,  945, 1110,  950,  954,  951,
     1110, 1110, 1110, 1110,  958,  955, 1110,  957, 1110,  962,
      956,  960,  959,  964,  961, 1110, 1110,  963,  965, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
      967, 1110,  969,  966, 1110,  968,  976, 1110,  982,  970,
     1110,  974,  972,  971,  973,  975,  979,  977,  981, 1110,
      978, 1110,  983,  980, 1110, 1110, 1110, 1110, 1110,  984,
     1110,  986, 1110, 1110, 1110, 1110, 1110, 1110,  989, 1110,
      985, 1110, 1110,  991,  993, 1110,  987, 1004, 1001,  995,
      997,  988,  994,  998, 1000,  992,  996, 1002, 1110, 1110,
     1003, 1110, 1005, 1110, 1110, 1110,  999, 1110, 1110, 1110,
     1110, 1015, 1110, 1009, 1110, 1110, 1006, 1110, 1007, 1011,
     1008, 1010, 1110, 1110, 1012, 1014, 1110, 1110, 1013, 1017,

     1022, 1110, 1110, 1110, 1110, 1024, 1110, 1110, 1110, 1016,
     1023, 1018, 1110, 1110, 1110, 1026, 1110, 1110, 1110, 1019,
     1020, 1021, 1110, 1025, 1031, 1110, 1032, 1110, 1030, 1033,
     1034, 1035, 1110, 1110, 1110, 1110, 1110, 1110, 1027, 1028,
     1029, 1039, 1041, 1036, 1110, 1110, 1110, 1043, 1040, 1037,
     1110, 1110, 1048, 1038, 1110, 1051, 1042, 1110, 1049, 1110,
     1044, 1045, 1046, 1047, 1110, 1110, 1053, 1052, 1055, 1110,
     1110, 1050, 1110, 1110, 1054, 1110, 1110, 1110, 1110, 1110,
     1056, 1110, 1060, 1110, 1110, 1110, 1110, 1058, 1110, 1110,
     1064, 1110, 1065, 1110, 1110, 1072, 1057, 1061, 1068, 1062,

     1069, 1059, 1067, 1073, 1063, 1079, 1074, 1075, 1076, 1077,
     1070, 1080, 1078, 1066, 1081, 1071, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1083, 1088, 1089, 1110,
     1084, 1090, 1085, 1093, 1099, 1086, 1087, 1082, 1092, 1094,
     1095, 1096, 1110, 1110, 1091, 1097, 1100, 1110, 1110, 1110,
     1110, 1098, 1106, 1107, 1108, 1109, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1105, 1110, 1110, 1110, 1110, 1110, 1110, 1101,
     1102, 1103, 1104,   59,   59,  162,  162,  162,  160,  160,

      160, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,  990,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110,  952, 1110,  948, 1110, 1110, 1110,  946, 1110, 1110,
     1110, 1110, 1110, 1110,  924,  923, 1110, 1110, 1110, 1110,
     1110, 1110, 1110,  886, 1110,  882,  880,  879,  877,  873,
     1110, 1110, 1110,  845,  844, 1110,  807, 1110, 1110, 1110,
      802,  800,  799,  798, 1110, 1110,  796, 1110, 1110,  792,
     1110, 1110, 1110, 1110, 1110,  779, 1110, 1110, 1110, 1110,

     1110, 1110, 1110, 1110,  721, 1110, 1110, 1110,  713,  711,
      710,  709, 1110,  705,  704,  703,  697, 1110, 1110, 1110,
     1110,  682,  681,  678,  677,  656,  648, 1110,  611, 1110,
     1110,  600,  598,  597,  596,  591,  590,  589,  583, 1110,
      560,  559, 1110,  536, 1110,  489, 1110, 1110,  480,  479,
      478, 1110,  472, 1110, 1110, 1110,  452, 1110, 1110, 1110,
      448, 1110, 1110, 1110, 1110, 1110,  424, 1110, 1110, 1110,
      365, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110,  161, 1110, 1110,  158,   58,  157,  135,
      113,  110, 1110,   68,   67,   58, 1110,    3, 1110, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110
    } ;

static yyconst flex_int16_t yy_chk[2369] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   18,   20,    5,    8,    8,   18,    8,    8,    8,
        8,   41,    8,   76,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   41,   50,  277,

      277,   20,    8,    8,    8,   50,    8,   76,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   34,   35,   34,   86,
       34,   19,   38,   19, 1111,   44,   38,   34,   35,   19,
       19,   19,   19,   19,   19,   39,   43,   43,   43,   44,
       57,   75,   64,   57,   39,   39,   43,   86,   43,   60,
       83,   79,   19,   26,   43,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   83,

       60,   64,   79,   26,   26,   26,   83,   26,   77,   75,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   77,   70,   32,
       80,   32,   27,  115,   81,  452,  452, 1109,  115,   45,
       27,   27,   27,   27,   27,   27,   32,   32,   70,   45,
       32,   32,   45,   33,   72,   32,   45,   37,   32,   33,
       33,   72,   80,   33,   74,   37,   33,   32,   36,   37,
       36,   78,   81,   36,   84,   37,   33,   37,   46,   36,

       46,   36,   48,   85,   74,   90,   46,   36,   78,   46,
       46,   36,   51,   46,   51,   46,   46,   72,   46,   51,
       48,   84,   82,   92,   48,   88,   94,  167,   89,   51,
       85,   97,  167,   90,   82,   90,   92,   87,   48,   49,
       49,   49,   91,   49,   49,   89,   97,   49,   93,  100,
       94,   49,   49,   82,   88,   49,   98,  104,   49,   49,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   87,   63,   91,   95,   98,  101,   99,   96,
      102,   91,  100,  104,   91,  103,   93,   63,   63,   63,
       63,   63,   96,   99,  105,   63,  107,   63,   63,  103,

      108,  101,  109,  118,  110,  111,  106,  105,  107,  113,
       99, 1108,  102,  108,  114,  112,   95,  110,  116,  118,
      119,  123,  113,  109,  124,  125,   63,   63,   63,   63,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      106,  117,  111,  112,  119,  114,  120,   65,  122,  127,
      116,  125,  124,  123,  144, 1107,  117,  128,  126, 1106,
      130,  121,  137,  141,  129,  151,  122,  131,  135,  144,
      127,  120,  120,  128,  121,  130,   65,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,  121,  126,  129,
      131,  121,   66,  130,  133,  141,  135,  137,  151,  282,

       66,   66,   66,   66,   66,   66,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,  133,  132,  133,
      134,   73,  138,  136,  139,  282,  140,  145,  142,   73,
       73,   73,   73,   73,   73,  132,  136,  139,  134,  143,
      145,  146,  143,  143,  147,  132,  140,  149,  136,  142,
      148,  150,  143,  138,  146,  152,  138,  147,  153,  154,
      145,  157,  155,  165,  150,  156,  159,  168,  165,  169,
      149,  146,  170,  148,  148,  181,  193,  154,  155,  156,
     1105,  171,  156,  152,  169,  153,  159,  173,  165,  157,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,

      162,  162,  168,  162,  171,  186,  173,  181,  180,  166,
      170,  174,  177,  175,  189,  193,  176,  162,  162,  162,
      162,  162,  166,  180,  178,  162,  175,  162,  162,  176,
      176,  174,  182,  177,  166,  176,  178,  184,  185,  176,
      190,  188,  186,  187,  192,  182,  189,  191,  194,  200,
      184,  196,  197,  185,  188,  198,  162,  162,  162,  162,
      187,  190,  191,  195,  195,  195,  195,  199,  192,  197,
      200,  201,  198,  203,  204,  205,  206,  207,  209,  194,
      208,  196,  210,  211,  199,  219,  212,  213,  201,  204,
      221,  205,  207,  206,  216,  218,  220,  203,  212,  208,

      222,  210,  217,  213,  224,  217,  221,  216,  223,  225,
      209,  226,  218,  220,  211,  217,  227,  219,  228,  229,
     1104,  223,  230,  226,  234,  233,  236,  237,  238,  224,
      248,  235,  241,  222,  254,  228,  229,  227,  223,  230,
      225,  233,  234,  235,  240,  243,  238,  242,  242,  235,
      240,  229,  223,  241,  245,  246,  249,  236,  256,  237,
      252,  243,  240,  257,  253,  248,  254,  254,  259,  249,
      240,  245,  258,  252,  260,  262,  243,  253,  255,  255,
      261,  242,  246,  263,  266,  258,  255,  260,  264,  265,
      256,  267,  270,  262,  274,  271,  259,  257,  278,  260,

      276,  261,  353,  267,  280,  260,  265,  271,  285,  279,
      281,  266,  284,  263,  286,  263,  287,  293,  260,  264,
      353,  280,  270,  273,  273,  273,  273,  281,  278,  279,
      274,  275,  275,  275,  275,  283,  276,  284,  286,  288,
      289,  285,  291,  290,  295,  298,  287,  283,  293,  283,
      292,  299,  283,  300,  301,  302,  288,  283,  304,  289,
      290,  309,  292,  303,  310,  291,  313,  295,  300,  311,
      312,  292,  299,  315,  292,  304,  303,  316,  317,  301,
      319,  322,  298,  320,  292,  315,  318,  323,  324,  328,
      313,  330,  302,  322,  310,  317,  312,  311,  309,  326,

      320,  318,  328,  333,  336,  337,  338,  319,  339,  316,
      341,  324,  330,  342,  345,  343,  346,  323,  337,  326,
      348,  336,  347,  338,  349,  350,  351,  345,  354,  352,
      359,  339,  361,  360,  362,  333,  343,  363,  368,  342,
      341,  348,  350,  369,  354,  349,  372,  351,  355,  355,
      377,  346,  352,  347,  360,  373,  355,  362,  375,  368,
      374,  374,  361,  359,  378,  379,  380,  363,  381,  382,
      375,  377,  373,  369,  383,  384,  386,  374,  372,  388,
      387,  377,  404,  402,  389,  378,  379,  405,  409,  381,
      394,  406,  388,  394,  387,  383,  387,  394,  380,  399,

      407,  382,  399,  413,  388,  403,  399,  384,  386,  389,
      402,  408,  403,  404,  409,  388,  406,  410,  411,  412,
      414,  415,  416,  418,  405,  419,  413,  407,  407,  417,
      411,  407,  423,  421,  420,  408,  422,  425,  426,  427,
      419,  419,  433,  431,  415,  428,  434,  435,  416,  410,
      426,  412,  429,  422,  418,  417,  431,  414,  415,  420,
      421,  430,  428,  423,  429,  427,  432,  436,  425,  437,
      433,  438,  434,  430,  439,  440,  442,  443,  432,  435,
      444,  445,  446,  436,  447,  453,  438,  451,  450,  443,
      455,  454,  442,  456,  458,  439,  445,  459,  460,  446,

      453,  447,  450,  462,  461,  440,  437,  463,  464,  465,
      456,  466,  444,  467,  451,  454,  461,  470,  468,  473,
      462,  469,  455,  470,  465,  474,  458,  464,  471,  459,
      460,  463,  473,  469,  475,  466,  471,  476,  467,  468,
      477,  482,  481,  483,  488,  484,  490,  491,  492,  495,
      496,  474,  493,  498,  476,  497,  500,  503,  482,  484,
      483,  501,  490,  505,  491,  504,  510,  477,  475,  481,
      497,  493,  492,  495,  501,  507,  500,  506,  508,  488,
      503,  507,  504,  496,  511,  506,  508,  509,  512,  513,
      505,  498,  511,  509,  514,  515,  516,  517,  510,  518,

      519,  520,  522,  523,  521, 1103,  530,  513,  524,  516,
      537,  514,  525,  526,  520,  523,  527,  517,  521,  512,
      524,  515,  522,  521,  525,  526,  518,  521,  528,  527,
      531,  526,  519,  530,  521,  532,  533,  534,  535,  538,
      539,  541,  540,  537,  528,  542,  547,  531,  532,  533,
      535,  545,  534,  539,  540,  544,  546,  549,  541,  538,
      548,  554,  550,  538,  551,  542,  555,  547,  557,  544,
      552,  561,  556,  546,  544,  553,  554,  548,  544,  562,
      549,  558,  552,  545,  556,  544,  565,  555,  544,  550,
      568,  551,  553,  570,  558,  569,  571,  572,  561,  573,

      574,  552,  575,  576,  577,  557,  578,  569,  579,  571,
      562,  580,  584,  586,  570,  585,  588,  574,  572,  565,
      592,  577,  594,  573,  595,  580,  587,  568,  575,  599,
      586,  602,  579,  578,  585,  576,  584,  603,  587,  604,
      605,  606,  610,  608,  612,  613,  592,  614,  588,  623,
      599,  595,  594,  624,  603,  602,  620,  605,  622,  625,
      626,  612,  628,  614,  630,  604,  627,  629,  620,  606,
      608,  631,  634,  626,  610,  623,  632,  624,  633,  622,
      635,  627,  613,  628,  634,  636,  629,  640,  630,  625,
      637,  638,  639,  632,  641,  633,  642,  643,  644,  647,

      645,  631,  646,  635,  649,  650,  651,  652,  636,  653,
      654,  637,  638,  639,  655,  641,  645,  644,  650,  640,
      647,  656,  642,  656,  657,  653,  658,  655,  659,  649,
      660,  643,  661,  651,  646,  663,  654,  662,  664,  652,
      667,  665,  666,  668,  674,  659,  672,  660,  657,  669,
      670,  673,  676,  679,  680,  683,  658,  665,  662,  666,
      685,  674,  669,  661,  686,  664,  667,  663,  676,  668,
      688,  670,  689,  672,  694,  692,  673,  695,  696,  699,
      679,  685,  708,  701,  700,  683,  680,  716,  714,  689,
      694,  686,  692,  685,  695,  688,  700,  712,  696,  719,

      716,  720,  722,  699,  701,  714,  723,  724,  725,  708,
      726,  727,  728,  712,  720,  729,  732,  731,  730,  734,
      733,  735,  736,  741,  724,  719,  730,  738,  729,  742,
      737,  732,  733,  725,  726,  739,  740,  723,  743,  722,
      731,  744,  734,  727,  738,  736,  737,  745,  746,  728,
      747,  748,  739,  740,  750,  749,  753,  741,  735,  751,
      745,  756,  743,  742,  754,  755,  746,  757,  748,  758,
      761,  747,  749,  762,  744,  751,  763,  754,  764,  765,
      757,  750,  753,  768,  766,  769,  755,  756,  770,  771,
      772,  773,  775,  761,  764,  758,  765,  769,  774,  763,

      777,  780,  772,  776,  778,  782,  781,  771,  784,  768,
      762,  766,  783,  785,  786,  787,  788,  774,  775,  781,
      776,  778,  782,  789,  773,  770,  777,  786,  783,  784,
      787,  793,  788,  780,  794,  795,  797,  801,  803,  785,
      789,  804,  805,  818,  811,  816,  817,  825,  793,  815,
      826,  795,  824,  803, 1100,  812,  818,  816,  794,  805,
      808,  808,  808,  808,  808,  808,  808,  808,  797,  801,
      808,  811,  812,  804,  815,  819,  820,  817,  824,  821,
      822,  823,  829,  830,  825,  831,  832,  826,  820,  833,
      819,  821,  822,  823,  835,  836,  840,  837,  838,  829,

      839,  851,  841,  842,  833,  843,  846,  832,  847,  850,
      848,  831,  837,  830,  838,  841,  839,  842,  846,  849,
      847,  843,  848,  840,  835,  836,  852,  851,  853,  855,
      856,  849,  857,  858,  859,  860,  862,  864,  852,  850,
      861,  867,  868,  870,  869,  883,  884,  897,  875,  853,
      855,  856,  859,  881,  868,  861,  895,  867,  900,  858,
      901,  902,  860,  869,  857,  875,  862,  864,  898,  903,
      904,  905,  895,  881,  912,  870,  906,  883,  897,  884,
      910,  913,  915,  916,  902,  898,  919,  901,  917,  906,
      900,  904,  903,  912,  905,  921,  922,  910,  913,  925,

      927,  926,  928,  931,  929,  936,  938,  933,  935,  941,
      916,  937,  919,  915,  932,  917,  929,  934,  936,  921,
      939,  927,  925,  922,  926,  928,  933,  931,  935,  943,
      932,  944,  937,  934,  947,  951,  955,  953,  956,  938,
      957,  941,  960,  958,  962,  969,  959,  961,  944,  974,
      939,  967,  968,  947,  953,  970,  943,  969,  962,  956,
      958,  943,  955,  959,  961,  951,  957,  967,  971,  978,
      968,  972,  970,  973,  975,  976,  960,  982,  977,  984,
      983,  978,  985,  974,  988,  987,  971,  991,  972,  976,
      973,  975,  994,  992,  976,  977,  995,  996,  976,  983,

      991,  997,  998, 1000, 1001,  994, 1007, 1002, 1003,  982,
      992,  984, 1008, 1006, 1004,  996, 1010, 1011, 1012,  985,
      987,  988, 1014,  995, 1002, 1013, 1003, 1016, 1001, 1004,
     1004, 1006, 1015, 1019, 1026, 1021, 1020, 1022,  997,  998,
     1000, 1011, 1013, 1007, 1024, 1025, 1033, 1015, 1012, 1008,
     1030, 1034, 1022, 1010, 1031, 1026, 1014, 1039, 1024, 1040,
     1016, 1019, 1020, 1021, 1041, 1042, 1031, 1030, 1034, 1044,
     1043, 1025, 1045, 1046, 1033, 1047, 1048, 1054, 1049, 1051,
     1039, 1055, 1042, 1056, 1098, 1053, 1090, 1041, 1060, 1061,
     1046, 1057, 1047, 1063, 1062, 1056, 1040, 1043, 1051, 1044,

     1053, 1041, 1049, 1057, 1045, 1061, 1058, 1058, 1059, 1059,
     1054, 1062, 1060, 1048, 1063, 1055, 1058, 1064, 1059, 1067,
     1069, 1071, 1072, 1073, 1079, 1074, 1075, 1081, 1085, 1092,
     1088, 1084, 1086, 1087, 1089, 1091, 1067, 1074, 1075, 1093,
     1069, 1079, 1071, 1085, 1092, 1072, 1073, 1064, 1084, 1086,
     1087, 1088, 1094, 1095, 1081, 1089, 1093, 1096, 1097, 1099,
     1083, 1091, 1101, 1101, 1102, 1102, 1082, 1080, 1078, 1077,
     1076, 1070, 1101, 1068, 1102, 1066, 1065, 1052, 1050, 1038,
     1037, 1036, 1099, 1035, 1032, 1029, 1028, 1027, 1023, 1094,
     1095, 1096, 1097, 1112, 1112, 1113, 1113, 1113, 1114, 1114,

     1114, 1018, 1017, 1009, 1005,  999,  993,  989,  986,  981,
      980,  979,  966,  965,  964,  963,  954,  950,  949,  946,
      945,  942,  940,  930,  920,  918,  914,  911,  909,  908,
      907,  899,  896,  894,  893,  892,  891,  890,  889,  888,
      887,  886,  885,  879,  878,  876,  874,  873,  872,  871,
      866,  865,  863,  854,  845,  844,  834,  828,  827,  814,
      813,  810,  809,  807,  806,  802,  800,  799,  796,  792,
      791,  790,  767,  760,  759,  752,  721,  718,  717,  715,
      713,  711,  710,  709,  707,  706,  703,  702,  698,  697,
      693,  691,  690,  687,  684,  678,  675,  671,  621,  619,

      618,  617,  616,  615,  611,  609,  607,  601,  600,  598,
      597,  596,  593,  591,  590,  589,  583,  582,  581,  567,
      566,  564,  563,  560,  559,  543,  536,  529,  502,  499,
      494,  489,  487,  486,  485,  480,  479,  478,  472,  457,
      449,  448,  441,  424,  385,  376,  371,  370,  367,  366,
      365,  364,  358,  344,  340,  335,  334,  332,  331,  329,
      327,  325,  321,  314,  297,  296,  294,  272,  269,  268,
      251,  250,  247,  244,  239,  232,  231,  215,  214,  202,
      183,  179,  172,  160,   71,   69,   59,   58,   52,   47,
       42,   40,   31,   25,   23,    6,    3, 1110, 1110, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110
    } ;

static yyconst flex_int16_t yy_rule_linenum[247] =
    {   0,
       44,   45,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  105,  106,
      107,  108,  109,  110,  112,  114,  115,  116,  118,  119,
      120,  121,  122,  124,  125,  126,  127,  129,  130,  131,
      132,  133,  134,  135,  136,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  148,  149,  150,  151,  152,  153,

      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
      195,  196,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  219,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      237,  238,  240,  241,  242,  243,  244,  246,  247,  248,
      249,  250,  252,  253,  254,  256,  258,  259,  260,  261,

      262,  263,  264,  266,  268,  269,  270,  271,  272,  273,
      274,  276,  277,  278,  280,  281,  282,  284,  285,  286,
      287,  288,  289,  290,  291,  292,  293,  294,  296,  297,
      298,  299,  300,  301,  302,  303,  304,  305,  306,  308,
      309,  310,  312,  313,  314,  315
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2022 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 22 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 35 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1437 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 38 "../s/bif.l"



   yylloc->step ();


#line 1601 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1111 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1110 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 247 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 247 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 248 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::BIF_SECTION;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "../s/bif.l"
yylval->number = tok::RESERVE_LEGACY;           return tok::RESERVE_LEGACY;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::UNIQUE_ID;                return tok::UNIQUE_ID;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::PARENT_UNIQUE_ID;         return tok::PARENT_UNIQUE_ID;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::FUNCTION_ID;              return tok::FUNCTION_ID;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "../s/bif.l"
yylval->number = tok::USER_KEYS;                return tok::USER_KEYS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 112 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 114 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 116 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 118 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 120 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 121 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 122 "../s/bif.l"
yylval->number = Authentication::ECDSAp521;     return tok::AUTHVALUE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 124 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 126 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 127 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 129 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 130 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 131 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 133 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 134 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 135 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 136 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;return tok::PTYPEVALUE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "../s/bif.l"
yylval->number = PartitionType::RAW;            return tok::PTYPEVALUE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "../s/bif.l"
yylval->number = PartitionType::CFI;            return tok::PTYPEVALUE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;        return tok::PTYPEVALUE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;       return tok::PTYPEVALUE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;     return tok::PTYPEVALUE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE;      return tok::PTYPEVALUE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = tok::A_HWROT;                  return tok::A_HWROT;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = tok::S_HWROT;                  return tok::S_HWROT;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 209 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 215 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 216 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 217 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 221 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 222 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 232 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 233 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 234 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 235 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 237 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 238 "../s/bif.l"
yylval->number = DestinationCPU::AIE;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 240 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 241 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 242 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 244 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 246 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 247 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 248 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 250 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 252 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 253 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 254 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 259 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 260 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 261 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 262 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 263 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 264 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 266 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 268 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 269 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 270 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 271 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 272 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 273 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 274 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 276 "../s/bif.l"
yylval->number = tok::AUTHJTAG_CONFIG;          return tok::AUTHJTAG_CONFIG;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 277 "../s/bif.l"
yylval->number = tok::DEVICE_DNA;               return tok::DEVICE_DNA;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 278 "../s/bif.l"
yylval->number = tok::JTAG_TIMEOUT;             return tok::JTAG_TIMEOUT;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 280 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 281 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 282 "../s/bif.l"
yylval->string=strdup(yytext);                  return tok::HEXWORD;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 284 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 285 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 286 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 287 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 288 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 289 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 290 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 291 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 292 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 293 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 294 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 296 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 297 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 298 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 299 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 300 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 301 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 302 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 303 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 304 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 305 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 306 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 308 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 309 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 310 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 312 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 313 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 314 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 315 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 316 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2947 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1111 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1111 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1110);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 316 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

